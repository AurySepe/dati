<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="io.reactivex.FlowableEmitter" />
			<role name="FactoryMethod()" element="io.reactivex.FlowableEmitter::serialize():io.reactivex.FlowableEmitter" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.Scheduler" />
			<role name="FactoryMethod()" element="io.reactivex.Scheduler::createWorker():io.reactivex.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.Scheduler$Worker" />
			<role name="FactoryMethod()" element="io.reactivex.Scheduler$Worker::schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit):io.reactivex.disposables.Disposable" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.ObservableEmitter" />
			<role name="FactoryMethod()" element="io.reactivex.ObservableEmitter::serialize():io.reactivex.ObservableEmitter" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="io.reactivex.internal.disposables.DisposableHelper" />
			<role name="uniqueInstance" element="io.reactivex.internal.disposables.DisposableHelper::DISPOSED:io.reactivex.internal.disposables.DisposableHelper" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.disposables.EmptyDisposable" />
			<role name="uniqueInstance" element="io.reactivex.internal.disposables.EmptyDisposable::INSTANCE:io.reactivex.internal.disposables.EmptyDisposable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.subscribers.flowable.EmptyComponent" />
			<role name="uniqueInstance" element="io.reactivex.internal.subscribers.flowable.EmptyComponent::INSTANCE:io.reactivex.internal.subscribers.flowable.EmptyComponent" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.util.NotificationLite" />
			<role name="uniqueInstance" element="io.reactivex.internal.util.NotificationLite::COMPLETE:io.reactivex.internal.util.NotificationLite" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.util.HashMapSupplier" />
			<role name="uniqueInstance" element="io.reactivex.internal.util.HashMapSupplier::INSTANCE:io.reactivex.internal.util.HashMapSupplier" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.util.ArrayListSupplier" />
			<role name="uniqueInstance" element="io.reactivex.internal.util.ArrayListSupplier::INSTANCE:io.reactivex.internal.util.ArrayListSupplier" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.subscriptions.EmptySubscription" />
			<role name="uniqueInstance" element="io.reactivex.internal.subscriptions.EmptySubscription::INSTANCE:io.reactivex.internal.subscriptions.EmptySubscription" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.subscriptions.SubscriptionHelper" />
			<role name="uniqueInstance" element="io.reactivex.internal.subscriptions.SubscriptionHelper::CANCELLED:io.reactivex.internal.subscriptions.SubscriptionHelper" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.functions.Functions$HashSetCallable" />
			<role name="uniqueInstance" element="io.reactivex.internal.functions.Functions$HashSetCallable::INSTANCE:io.reactivex.internal.functions.Functions$HashSetCallable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.functions.Functions$NaturalComparator" />
			<role name="uniqueInstance" element="io.reactivex.internal.functions.Functions$NaturalComparator::INSTANCE:io.reactivex.internal.functions.Functions$NaturalComparator" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.schedulers.NewThreadScheduler" />
			<role name="uniqueInstance" element="io.reactivex.internal.schedulers.NewThreadScheduler::INSTANCE:io.reactivex.internal.schedulers.NewThreadScheduler" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.schedulers.TrampolineScheduler" />
			<role name="uniqueInstance" element="io.reactivex.internal.schedulers.TrampolineScheduler::INSTANCE:io.reactivex.internal.schedulers.TrampolineScheduler" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowable" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowable::INSTANCE:io.reactivex.internal.operators.single.SingleInternalHelper$ToFlowable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.single.SingleInternalHelper$NoSuchElementCallable" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.single.SingleInternalHelper$NoSuchElementCallable::INSTANCE:io.reactivex.internal.operators.single.SingleInternalHelper$NoSuchElementCallable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.maybe.MaybeToPublisher" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.maybe.MaybeToPublisher::INSTANCE:io.reactivex.internal.operators.maybe.MaybeToPublisher" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.maybe.MaybeNever" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.maybe.MaybeNever::INSTANCE:io.reactivex.internal.operators.maybe.MaybeNever" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.maybe.MaybeEmpty" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.maybe.MaybeEmpty::INSTANCE:io.reactivex.internal.operators.maybe.MaybeEmpty" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax::INSTANCE:io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$MapToInt" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$MapToInt::INSTANCE:io.reactivex.internal.operators.flowable.FlowableInternalHelper$MapToInt" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$MapToInt" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$MapToInt::INSTANCE:io.reactivex.internal.operators.observable.ObservableInternalHelper$MapToInt" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$ErrorMapperFilter" />
			<role name="uniqueInstance" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$ErrorMapperFilter::INSTANCE:io.reactivex.internal.operators.observable.ObservableInternalHelper$ErrorMapperFilter" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.subscribers.TestSubscriber$EmptySubscriber" />
			<role name="uniqueInstance" element="io.reactivex.subscribers.TestSubscriber$EmptySubscriber::INSTANCE:io.reactivex.subscribers.TestSubscriber$EmptySubscriber" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.Notification" />
			<role name="uniqueInstance" element="io.reactivex.Notification::COMPLETE:io.reactivex.Notification" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.observers.TestObserver$EmptyObserver" />
			<role name="uniqueInstance" element="io.reactivex.observers.TestObserver$EmptyObserver::INSTANCE:io.reactivex.observers.TestObserver$EmptyObserver" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::arbiter:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::arbiter:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::sd:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::sd:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::sa:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::sa:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::arbiter:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState::connection:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Adaptee" element="io.reactivex.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::error:io.reactivex.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Adaptee" element="io.reactivex.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::error:io.reactivex.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::errors:io.reactivex.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Adaptee" element="io.reactivex.internal.util.OpenHashSet" />
			<role name="adaptee" element="io.reactivex.disposables.CompositeDisposable::resources:io.reactivex.internal.util.OpenHashSet" />
			<role name="Request()" element="io.reactivex.disposables.CompositeDisposable::add(io.reactivex.disposables.Disposable):boolean" />
			<role name="Request()" element="io.reactivex.disposables.CompositeDisposable::delete(io.reactivex.disposables.Disposable):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromObservable" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromObservable::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.FlowableEmitter$BackpressureMode" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableCreate::backpressure:io.reactivex.FlowableEmitter$BackpressureMode" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.FlowableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableCreate::source:io.reactivex.FlowableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber" />
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::sampler:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber" />
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::timeout(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::boundary:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable" />
			<role name="Adaptee" element="io.reactivex.subjects.BehaviorSubject" />
			<role name="adaptee" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable::state:io.reactivex.subjects.BehaviorSubject" />
			<role name="Request()" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.subjects.PublishSubject$PublishDisposable" />
			<role name="Adaptee" element="io.reactivex.subjects.PublishSubject" />
			<role name="adaptee" element="io.reactivex.subjects.PublishSubject$PublishDisposable::parent:io.reactivex.subjects.PublishSubject" />
			<role name="Request()" element="io.reactivex.subjects.PublishSubject$PublishDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.subjects.ReplaySubject$ReplayDisposable" />
			<role name="Adaptee" element="io.reactivex.subjects.ReplaySubject" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$ReplayDisposable::state:io.reactivex.subjects.ReplaySubject" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$ReplayDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.ObservableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableCreate::source:io.reactivex.ObservableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::innerClose(boolean, io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::innerClose(boolean, io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservablePublish$PublishSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservablePublish$PublishSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservablePublish$PublishSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableZip$ZipSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableZip$ZipSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableZip$ZipSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.BlockingObservableIterator" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.BlockingObservableIterator::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.BlockingObservableIterator::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="Adaptee" element="io.reactivex.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter" />
			<role name="Adaptee" element="io.reactivex.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::error:io.reactivex.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualSubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualSubscriber::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="Adaptee" element="io.reactivex.SingleObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleCreate$Emitter" />
			<role name="Adaptee" element="io.reactivex.SingleObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.SingleObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.SingleObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber" />
			<role name="Adaptee" element="io.reactivex.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::sd:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver" />
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::sd:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter" />
			<role name="Adaptee" element="io.reactivex.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.observers.TestObserver" />
			<role name="Adaptee" element="io.reactivex.internal.fuseable.QueueDisposable" />
			<role name="adaptee" element="io.reactivex.observers.TestObserver::qs:io.reactivex.internal.fuseable.QueueDisposable" />
			<role name="Request()" element="io.reactivex.observers.TestObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.observers.TestObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.CompletableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableCreate::source:io.reactivex.CompletableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.MaybeSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToCompletable" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToCompletable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.MaybeSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToFlowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToFlowable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.MaybeSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToObservable" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToObservable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.MaybeSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeToSingle" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeToSingle::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::error:io.reactivex.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.SingleOnSubscribe" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleCreate::source:io.reactivex.SingleOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::runSync():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::runAsync():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::runBackfused():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedSubscriber" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.single.SingleCache" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleCache$CacheDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleCache$CacheDisposable::parent:io.reactivex.internal.operators.single.SingleCache" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCache$CacheDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.MaybeOnSubscribe" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeCreate" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeCreate::source:io.reactivex.MaybeOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleToFlowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleToFlowable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.processors.ReplayProcessor$Node" />
			<role name="Adapter" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::tail:io.reactivex.processors.ReplayProcessor$Node" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::head:io.reactivex.processors.ReplayProcessor$Node" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::replay(io.reactivex.processors.ReplayProcessor$ReplaySubscription):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.processors.ReplayProcessor$TimedNode" />
			<role name="Adapter" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::tail:io.reactivex.processors.ReplayProcessor$TimedNode" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::head:io.reactivex.processors.ReplayProcessor$TimedNode" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::replay(io.reactivex.processors.ReplayProcessor$ReplaySubscription):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableUsing" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableUsing::sourceSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccessMapper:io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onErrorMapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::debounceSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::valueSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onNextMapper:io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onErrorMapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::valueSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::combiner:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.subjects.ReplaySubject$Node" />
			<role name="Adapter" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::tail:io.reactivex.subjects.ReplaySubject$Node" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::head:io.reactivex.subjects.ReplaySubject$Node" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::replay(io.reactivex.subjects.ReplaySubject$ReplayDisposable):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.subjects.ReplaySubject$TimedNode" />
			<role name="Adapter" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::tail:io.reactivex.subjects.ReplaySubject$TimedNode" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::head:io.reactivex.subjects.ReplaySubject$TimedNode" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::replay(io.reactivex.subjects.ReplaySubject$ReplayDisposable):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableUsing::sourceSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onNext:io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onSuccess:io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.LambdaObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onNext:io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onError:io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onSuccess:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.subjects.ReplaySubject" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject::buffer:io.reactivex.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::hasThrowable():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::filter:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onNext:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::set:io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::current:io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::nextSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::parent:io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::parent:io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::disposables:io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerComplete(io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::disposables:io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::innerComplete(io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.disposables.ObserverFullArbiter" />
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver::arbiter:io.reactivex.internal.disposables.ObserverFullArbiter" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.FullArbiterObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::set:io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.CompletableSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableToFlowable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableToFlowable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::consumer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserverSupport" />
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::parent:io.reactivex.internal.subscribers.observable.InnerQueuedObserverSupport" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.processors.ReplayProcessor" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor::buffer:io.reactivex.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::hasThrowable():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onAfterTerminate:io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onDispose:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onDispose:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.observable.LambdaObserver" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.subscriptions.FullArbiter" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber::arbiter:io.reactivex.internal.subscriptions.FullArbiter" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.flowable.FlowableCache$CacheState" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription::state:io.reactivex.internal.operators.flowable.FlowableCache$CacheState" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCache$ReplaySubscription::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.observable.ObservableCache$CacheState" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable::state:io.reactivex.internal.operators.observable.ObservableCache$CacheState" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Observer" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber" />
			<role name="Adaptee" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::buffer:io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerClose(boolean, io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::queue:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::innerClose(boolean, io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::queue:io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable" />
			<role name="Adaptee" element="io.reactivex.CompletableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable::other:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableFromSingle" />
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableFromSingle::single:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromSingle::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable" />
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableToSingle" />
			<role name="Adaptee" element="io.reactivex.CompletableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableToSingle::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToSingle::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Observable" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableFromObservable" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableFromObservable::upstream:io.reactivex.Observable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromObservable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::accumulator:io.reactivex.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::accumulator:io.reactivex.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::zipper:io.reactivex.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::combiner:io.reactivex.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.CompletableSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableToObservable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableToObservable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableFromObservable" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableFromObservable::observable:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromObservable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Observer" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::observer:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle" />
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromSingle" />
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromSingle::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleDelayWithObservable" />
			<role name="Adaptee" element="io.reactivex.ObservableSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleDelayWithObservable::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleToObservable" />
			<role name="Adaptee" element="io.reactivex.SingleSource" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleToObservable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleFromObservable" />
			<role name="Adaptee" element="io.reactivex.Observable" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleFromObservable::upstream:io.reactivex.Observable" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFromObservable::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::subscribers:io.reactivex.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter::serial:io.reactivex.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter::isCancelled():boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter::setDisposable(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.CompletableSource" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableObserveOn" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableObserveOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableObserveOn::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableTimeout" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableTimeout::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableTimeout::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableTimer" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableTimer::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableTimer::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Predicate" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber::filter:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableUsing::completableFunction:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.CompletableOperator" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableLift" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableLift::onLift:io.reactivex.CompletableOperator" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableLift::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Observer" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleSubscribeOn" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleSubscribeOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleSubscribeOn::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleTimeout" />
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleTimeout::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleTimeout::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Function" />
			<role name="Adapter" element="io.reactivex.internal.operators.single.SingleUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.single.SingleUsing::singleFunction:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onEvent:io.reactivex.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::collector:io.reactivex.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.subscribers.single.BiConsumerSingleObserver" />
			<role name="Adaptee" element="io.reactivex.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.internal.subscribers.single.BiConsumerSingleObserver::onCallback:io.reactivex.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.BiConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.BiConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableUsing" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.functions.Functions$ActionConsumer" />
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="adaptee" element="io.reactivex.internal.functions.Functions$ActionConsumer::action:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$ActionConsumer::accept(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.BiPredicate" />
			<role name="Adapter" element="io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber" />
			<role name="adaptee" element="io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::comparer:io.reactivex.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BiPredicate" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::predicate:io.reactivex.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="Adapter" element="io.reactivex.internal.operators.completable.CompletableFromAction" />
			<role name="adaptee" element="io.reactivex.internal.operators.completable.CompletableFromAction::run:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromAction::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.Action" />
			<role name="Adapter" element="io.reactivex.internal.operators.maybe.MaybeFromAction" />
			<role name="adaptee" element="io.reactivex.internal.operators.maybe.MaybeFromAction::action:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromAction::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber" />
			<role name="Adaptee" element="io.reactivex.functions.BooleanSupplier" />
			<role name="adaptee" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::stop:io.reactivex.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="Adapter" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::replay(io.reactivex.processors.ReplayProcessor$ReplaySubscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.Scheduler" />
			<role name="Adapter" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::replay(io.reactivex.subjects.ReplaySubject$ReplayDisposable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.functions.BooleanSupplier" />
			<role name="Adapter" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse" />
			<role name="adaptee" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse::supplier:io.reactivex.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse::test(T):boolean" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite" />
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="io.reactivex.processors.FlowableProcessor" />
			<role name="Decorator" element="io.reactivex.processors.SerializedProcessor" />
			<role name="component" element="io.reactivex.processors.SerializedProcessor::actual:io.reactivex.processors.FlowableProcessor" />
			<role name="Operation()" element="io.reactivex.processors.SerializedProcessor::hasSubscribers():boolean" />
			<role name="Operation()" element="io.reactivex.processors.SerializedProcessor::hasThrowable():boolean" />
			<role name="Operation()" element="io.reactivex.processors.SerializedProcessor::getThrowable():java.lang.Throwable" />
			<role name="Operation()" element="io.reactivex.processors.SerializedProcessor::hasComplete():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::other:io.reactivex.disposables.Disposable" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedSubscriber::timer:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::resource:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::subscription:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::subscription:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.subscribers.observable.BlockingSingleObserver" />
			<role name="component" element="io.reactivex.internal.subscribers.observable.BlockingSingleObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BlockingSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="component" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.observers.SafeObserver" />
			<role name="component" element="io.reactivex.observers.SafeObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.disposables.Disposable" />
			<role name="Decorator" element="io.reactivex.observers.SerializedObserver" />
			<role name="component" element="io.reactivex.observers.SerializedObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybePeek$MaybePeekObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver" />
			<role name="component" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$DelayWithMainObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$DelayWithMainObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$DelayWithMainObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$DelayWithMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleHide$HideSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.SingleObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::actual:io.reactivex.SingleObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferExactSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableBuffer$BufferSkipSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCollect$CollectSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::actual:io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::inner:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCount$CountSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed$DebounceTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDelay$DelaySubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDematerialize$DematerializeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDetach$DetachObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableElementAt$ElementAtSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableHide$HideDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableMaterialize$MaterializeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::subscriber:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRefCount$ConnectionSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleTimed$SampleTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScan$ScanSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableScanSeed$ScanSeedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSingle$SingleElementSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkip$SkipSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLast$SkipLastSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$SkipUntilSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTake$TakeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLast$TakeLastSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastOne$TakeLastOneSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$TakeUntilSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeInterval$TimeIntervalSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableToList$ToListSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowSkipSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableZipIterable$ZipIterableSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObserverResourceWrapper::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.observers.SafeObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.observers.SafeObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.observers.SafeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.observers.SerializedObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.observers.SerializedObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.observers.SerializedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.observers.TestObserver" />
			<role name="Component" element="io.reactivex.Observer" />
			<role name="component" element="io.reactivex.observers.TestObserver::actual:io.reactivex.Observer" />
			<role name="Operation()" element="io.reactivex.observers.TestObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.observers.TestObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.observers.TestObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.observers.TestObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.functions.Consumer" />
			<role name="Decorator" element="io.reactivex.internal.functions.Functions$NotificationOnNext" />
			<role name="component" element="io.reactivex.internal.functions.Functions$NotificationOnNext::onNotification:io.reactivex.functions.Consumer" />
			<role name="Operation()" element="io.reactivex.internal.functions.Functions$NotificationOnNext::accept(T):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.subjects.Subject" />
			<role name="Decorator" element="io.reactivex.subjects.SerializedSubject" />
			<role name="component" element="io.reactivex.subjects.SerializedSubject::actual:io.reactivex.subjects.Subject" />
			<role name="Operation()" element="io.reactivex.subjects.SerializedSubject::hasObservers():boolean" />
			<role name="Operation()" element="io.reactivex.subjects.SerializedSubject::hasThrowable():boolean" />
			<role name="Operation()" element="io.reactivex.subjects.SerializedSubject::getThrowable():java.lang.Throwable" />
			<role name="Operation()" element="io.reactivex.subjects.SerializedSubject::hasComplete():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.CompletableObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver" />
			<role name="component" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::actual:io.reactivex.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.CompletableObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver" />
			<role name="component" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::actual:io.reactivex.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.CompletableObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver" />
			<role name="component" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::actual:io.reactivex.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.CompletableObserver" />
			<role name="Decorator" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="component" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::actual:io.reactivex.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.ObservableEmitter" />
			<role name="Decorator" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter" />
			<role name="component" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::emitter:io.reactivex.ObservableEmitter" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::setDisposable(io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::setCancellable(io.reactivex.functions.Cancellable):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::isCancelled():boolean" />
		</instance>
	</pattern>
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.disposables.ObserverFullArbiter" />
			<role name="state" element="io.reactivex.internal.disposables.ObserverFullArbiter::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.disposables.ObserverFullArbiter::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable$SingleToObservableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable" />
			<role name="state" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.subjects.BehaviorSubject$BehaviorDisposable::emitLoop():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableAmb$AmbCoordinator::subscribe(io.reactivex.ObservableSource):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable::child:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCache$ReplayDisposable::replay():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::subscribe(io.reactivex.ObservableSource):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator::subscribe(io.reactivex.ObservableSource, int):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.subjects.PublishSubject$PublishDisposable" />
			<role name="state" element="io.reactivex.subjects.PublishSubject$PublishDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.subjects.PublishSubject$PublishDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.subjects.PublishSubject$PublishDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.subjects.PublishSubject$PublishDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter::observer:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::o:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::run():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableInterval$IntervalSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableInterval$IntervalSubscriber::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableInterval$IntervalSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeSubscriber::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableIntervalRange$IntervalRangeSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimer$IntervalOnceSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimer$IntervalOnceSubscriber::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimer$IntervalOnceSubscriber::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber" />
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber::NEW_TIMER:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber" />
			<role name="State" element="io.reactivex.Scheduler$Worker" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber::worker:io.reactivex.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed$DebounceTimedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRefCount$ConnectionSubscriber" />
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRefCount$ConnectionSubscriber::resource:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRefCount$ConnectionSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromObservable" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromObservable::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableCreate" />
			<role name="State" element="io.reactivex.FlowableOnSubscribe" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableCreate::source:io.reactivex.FlowableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRedo$RedoSubscriber::handle(io.reactivex.Notification):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeat$RepeatSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$RetryBiSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::sampler:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSampleWithObservable$SamplePublisherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::timeout(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed$TimeoutTimedOtherSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainSubscriber::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber::bufferOpen:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::boundary:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber::open:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::first:io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::second:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::subscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCreate" />
			<role name="State" element="io.reactivex.ObservableOnSubscribe" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCreate::source:io.reactivex.ObservableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.BlockingObservableIterable" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.observable.BlockingObservableIterable::source:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.BlockingObservableIterable::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate$Emitter::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromObservable$FromObservableToMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromPublisher$FromPublisherToMaybeObserver" />
			<role name="State" element="io.reactivex.MaybeObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromPublisher$FromPublisherToMaybeObserver::actual:io.reactivex.MaybeObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromPublisher$FromPublisherToMaybeObserver::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromPublisher$FromPublisherToMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromPublisher$FromPublisherToMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleCreate$Emitter" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate$Emitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver" />
			<role name="State" element="io.reactivex.SingleObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver::actual:io.reactivex.SingleObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFromPublisher$ToSingleObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber" />
			<role name="State" element="io.reactivex.CompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="State" element="io.reactivex.CompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::terminate():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="State" element="io.reactivex.CompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::next():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter" />
			<role name="State" element="io.reactivex.CompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::actual:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate$Emitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber" />
			<role name="State" element="io.reactivex.CompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::cs:io.reactivex.CompletableObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler$Worker" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::w:io.reactivex.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromArray$FromArrayDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFromIterable$FromIterableDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRange$RangeDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable::observer:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.subscribers.observable.DeferredScalarDisposable" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.DeferredScalarDisposable::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.DeferredScalarDisposable::complete(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.DeferredScalarDisposable::error(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.DeferredScalarDisposable::complete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::sources:io.reactivex.CompletableSource[]" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::next():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::tryEmitScalar(U):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::cancel():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::checkTerminated(boolean, boolean, org.reactivestreams.Subscriber):boolean" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::clear():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableCreate" />
			<role name="State" element="io.reactivex.CompletableOnSubscribe" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableCreate::source:io.reactivex.CompletableOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableCreate::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToCompletable" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToCompletable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToCompletable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToFlowable" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToFlowable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToObservable" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToObservable::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToSingle" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToSingle::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToSingle::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithSingle$OtherObserver::onSuccess(U):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator::zipper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::combiner:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber::debounceSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDebounce$DebounceSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onNextMapper:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onErrorMapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber::nextSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber::valueSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleCreate" />
			<role name="State" element="io.reactivex.SingleOnSubscribe" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleCreate::source:io.reactivex.SingleOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleCreate::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::runSync():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$PublisherObserveOnConditionalSubscriber::runAsync():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::actual:io.reactivex.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver::sources:io.reactivex.MaybeSource[]" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RepeatSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RepeatSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRetryPredicate$RepeatSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedSubscriber" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowTimed$WindowExactBoundedSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed$WindowExactBoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::cancel():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::clear():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::isEmpty():boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeCreate" />
			<role name="State" element="io.reactivex.MaybeOnSubscribe" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeCreate::source:io.reactivex.MaybeOnSubscribe" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCreate::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask::source:io.reactivex.MaybeSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleToFlowable" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleToFlowable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToFlowableSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToFlowableSubscriber::d:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToObservable$MaybeToFlowableSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.QueueDisposable" />
			<role name="Context" element="io.reactivex.observers.TestObserver" />
			<role name="state" element="io.reactivex.observers.TestObserver::qs:io.reactivex.internal.fuseable.QueueDisposable" />
			<role name="Request()" element="io.reactivex.observers.TestObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast::selector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowablePublishMulticast::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRepeatWhen" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRepeatWhen::handler:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRepeatWhen::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRetryWhen" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRetryWhen::handler:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRetryWhen::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableUsing" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableUsing::sourceSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber::bufferClose:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber::open(Open):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber::close:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutOtherSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFlatMap$MergeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccessMapper:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onErrorMapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::debounceSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::valueSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupBy$GroupBySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onNextMapper:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onErrorMapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::valueSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::bufferClose:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::open(Open):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::leftEnd:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::rightEnd:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::leftEnd:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::rightEnd:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::combiner:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::combiner:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator::zipper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutOtherSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber::onDrop:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing$UsingSubscriber::disposeAfter():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.plugins.RxJavaPlugins" />
			<role name="state" element="io.reactivex.plugins.RxJavaPlugins::errorHandler:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.plugins.RxJavaPlugins::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRedo" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRedo::manager:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRedo::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableUsing" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableUsing::sourceSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onNext:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing$UsingSubscriber::disposeAfter():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onSuccess:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::disposeState:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGenerate$GeneratorDisposable::dispose(S):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onNext:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.LambdaObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onSubscribe:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onNext:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onError:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onSuccess:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.single.ConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.subjects.ReplaySubject" />
			<role name="State" element="io.reactivex.subjects.ReplaySubject$ReplayBuffer" />
			<role name="state" element="io.reactivex.subjects.ReplaySubject::buffer:io.reactivex.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::subscribeActual(io.reactivex.Observer):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::onNext(T):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::onComplete():void" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::hasThrowable():boolean" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::hasValue():boolean" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::size():int" />
			<role name="Request()" element="io.reactivex.subjects.ReplaySubject::terminate(java.lang.Object):io.reactivex.subjects.ReplaySubject$ReplayDisposable[]" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableAll$AllSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableAny$AnySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDistinct$DistinctSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::filter:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableFilter$FilterSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRetryPredicate$RepeatSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipWhile$SkipWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeWhile$TakeWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onNext:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber::d:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver::d:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToFlowable$SingleToFlowableObserver::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.fuseable.QueueSubscription" />
			<role name="Context" element="io.reactivex.subscribers.TestSubscriber" />
			<role name="state" element="io.reactivex.subscribers.TestSubscriber::qs:io.reactivex.internal.fuseable.QueueSubscription" />
			<role name="Request()" element="io.reactivex.subscribers.TestSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber" />
			<role name="State" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriberSupport" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber::parent:io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriberSupport" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.InnerQueuedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::nextSupplier:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableOnErrorNext$OnErrorNextSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableMap$MapObserver" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableMap$MapObserver::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMap$MapObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableMap$MapObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::parent:io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightEndSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::parent:io.reactivex.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableGroupJoin$LeftRightSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::parent:io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::parent:io.reactivex.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutInnerSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.observable.ObservableTimeout$OnTimeout" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutInnerSubscriber::parent:io.reactivex.internal.operators.observable.ObservableTimeout$OnTimeout" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutInnerSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeout$TimeoutInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber" />
			<role name="State" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber::buffer:io.reactivex.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableReplay$ReplaySubscriber::replay():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableToFlowable" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableToFlowable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeMergeArray" />
			<role name="State" element="io.reactivex.MaybeSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeMergeArray::sources:io.reactivex.MaybeSource[]" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::consumer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ToNotificationObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver" />
			<role name="State" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserverSupport" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::parent:io.reactivex.internal.subscribers.observable.InnerQueuedObserverSupport" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.InnerQueuedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onNext:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber::onOverflow:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::onOverflow:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::onCancel:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::parent:io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onNext(R):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.processors.ReplayProcessor" />
			<role name="State" element="io.reactivex.processors.ReplayProcessor$ReplayBuffer" />
			<role name="state" element="io.reactivex.processors.ReplayProcessor::buffer:io.reactivex.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::subscribeActual(org.reactivestreams.Subscriber):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::onNext(T):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::onComplete():void" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::hasThrowable():boolean" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::hasValue():boolean" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::size():int" />
			<role name="Request()" element="io.reactivex.processors.ReplayProcessor::terminate(java.lang.Object):io.reactivex.processors.ReplayProcessor$ReplaySubscription[]" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDebounceTimed" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDebounceTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDebounceTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDelay" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDelay::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDelay::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableObserveOn" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableObserveOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableSubscribeOn" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableSubscribeOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableSubscribeOn::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTimeoutTimed" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTimeoutTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeoutTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableWindowTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTimeoutTimed::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableBufferTimed" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableBufferTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferTimed::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDebounceTimed::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDelay" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDelay::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDelay::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableObserveOn" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableObserveOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableObserveOn::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableThrottleFirstTimed::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableWindowTimed" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableWindowTimed::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowTimed::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onAfterTerminate:io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDoOnEach$DoOnEachSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onDispose:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::onDispose:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.SubscriptionLambdaObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeCallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.completable.CallbackCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.ForEachWhileSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.LambdaSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.ForEachWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.observable.LambdaObserver" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.subscribers.observable.LambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber" />
			<role name="State" element="io.reactivex.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::stop:io.reactivex.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.disposables.Disposable" />
			<role name="Context" element="io.reactivex.internal.subscriptions.FullArbiter" />
			<role name="state" element="io.reactivex.internal.subscriptions.FullArbiter::resource:io.reactivex.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.internal.subscriptions.FullArbiter::dispose():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableUsing" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber" />
			<role name="State" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::buffer:io.reactivex.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableReplay$ReplaySubscriber::replay():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableUsing" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="State" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::queue:io.reactivex.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::poll():java.lang.Object" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::drainNormal():void" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::drainFused():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable::other:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithCompletable::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableFromSingle" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableFromSingle::single:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromSingle::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMapCompletable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableToSingle" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableToSingle::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToSingle::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutInnerSubscriber" />
			<role name="State" element="io.reactivex.internal.operators.flowable.FlowableTimeout$OnTimeout" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutInnerSubscriber::parent:io.reactivex.internal.operators.flowable.FlowableTimeout$OnTimeout" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutInnerSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableToObservable" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableToObservable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableFromObservable" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableFromObservable::observable:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromObservable::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.Observer" />
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::observer:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onSubscribe(io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFilterSingle::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromSingle" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromSingle::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromSingle::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleDelayWithObservable" />
			<role name="State" element="io.reactivex.ObservableSource" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleDelayWithObservable::other:io.reactivex.ObservableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleDelayWithObservable::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleToObservable" />
			<role name="State" element="io.reactivex.SingleSource" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleToObservable::source:io.reactivex.SingleSource" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleToObservable::subscribeActual(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::combiner:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::drainAsync():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::keySelector:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::valueSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableMap$MapSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable" />
			<role name="State" element="io.reactivex.CompletableSource" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable::source:io.reactivex.CompletableSource" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromCompletable::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableObserveOn" />
			<role name="State" element="io.reactivex.Scheduler" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableObserveOn::scheduler:io.reactivex.Scheduler" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableObserveOn::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableAll$AllSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableAll$AllSubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableAll$AllSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber::predicate:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableAny$AnySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::filter:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber" />
			<role name="State" element="io.reactivex.functions.Predicate" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber::filter:io.reactivex.functions.Predicate" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableFilter$FilterSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter" />
			<role name="State" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableCreate$SerializedEmitter::drainLoop():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableUsing" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableUsing::completableFunction:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="Context" element="io.reactivex.internal.operators.single.SingleUsing" />
			<role name="state" element="io.reactivex.internal.operators.single.SingleUsing::singleFunction:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableUsing" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableUsing::disposer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.functions.Functions$ActionConsumer" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ActionConsumer::action:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$ActionConsumer::accept(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.functions.Functions$ToMapKeySelector" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMapKeySelector::keySelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$ToMapKeySelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.functions.Functions$ToMapKeyValueSelector" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMapKeyValueSelector::keySelector:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMapKeyValueSelector::valueSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$ToMapKeyValueSelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.functions.Functions$ToMultimapKeyValueSelector" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMultimapKeyValueSelector::keySelector:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMultimapKeyValueSelector::collectionFactory:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.functions.Functions$ToMultimapKeyValueSelector::valueSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$ToMultimapKeyValueSelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription::disposeState:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGenerate$GeneratorSubscription::dispose(S):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator::consumer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator::apply(S, io.reactivex.Emitter):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$SimpleGenerator" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$SimpleGenerator::consumer:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableInternalHelper$SimpleGenerator::apply(S, io.reactivex.Emitter):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::leftEnd:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::rightEnd:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::leftEnd:io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::rightEnd:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber::timeoutSelector:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber" />
			<role name="State" element="io.reactivex.functions.LongConsumer" />
			<role name="state" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::onRequest:io.reactivex.functions.LongConsumer" />
			<role name="Request()" element="io.reactivex.internal.subscribers.flowable.SubscriptionLambdaSubscriber::request(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onAfterTerminate:io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onAfterTerminate:io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onComplete:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onNext:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onNext:io.reactivex.functions.Consumer" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError:io.reactivex.functions.Consumer" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber::close:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="Context" element="io.reactivex.internal.operators.completable.CompletableFromAction" />
			<role name="state" element="io.reactivex.internal.operators.completable.CompletableFromAction::run:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableFromAction::subscribeActual(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.maybe.MaybeFromAction" />
			<role name="State" element="io.reactivex.functions.Action" />
			<role name="state" element="io.reactivex.internal.operators.maybe.MaybeFromAction::action:io.reactivex.functions.Action" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeFromAction::subscribeActual(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber" />
			<role name="State" element="io.reactivex.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::stop:io.reactivex.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableRepeatUntil$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="State" element="io.reactivex.functions.Function" />
			<role name="state" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::mapper:io.reactivex.functions.Function" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse" />
			<role name="State" element="io.reactivex.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse::supplier:io.reactivex.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.internal.functions.Functions$BooleanSupplierPredicateReverse::test(T):boolean" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Implementor" element="io.reactivex.disposables.Disposable" />
			<role name="Abstraction" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver" />
			<role name="implementor" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::fail(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.BasicFuseableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Implementor" element="io.reactivex.disposables.Disposable" />
			<role name="Abstraction" element="io.reactivex.internal.subscribers.observable.DeferredScalarObserver" />
			<role name="implementor" element="io.reactivex.internal.subscribers.observable.DeferredScalarObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.DeferredScalarObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Implementor" element="io.reactivex.disposables.Disposable" />
			<role name="Abstraction" element="io.reactivex.observers.DefaultObserver" />
			<role name="implementor" element="io.reactivex.observers.DefaultObserver::s:io.reactivex.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.observers.DefaultObserver::cancel():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.internal.subscribers.observable.QueueDrainObserver" />
			<role name="Implementor" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="implementor" element="io.reactivex.internal.subscribers.observable.QueueDrainObserver::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.QueueDrainObserver::fastPathEmit(U, boolean, io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.observable.QueueDrainObserver::fastPathOrderedEmit(U, boolean, io.reactivex.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber" />
			<role name="Implementor" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="implementor" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber::fastPathEmit(U, boolean):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber::fastPathEmitMax(U, boolean, io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber::fastPathOrderedEmitMax(U, boolean, io.reactivex.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.internal.subscribers.flowable.QueueDrainSubscriber::fastPathOrderedEmit(U, boolean):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber" />
			<role name="Implementor" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="implementor" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::cancel():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::checkTerminated(boolean, boolean, org.reactivestreams.Subscriber):boolean" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::clear():void" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::isEmpty():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber" />
			<role name="Implementor" element="io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="implementor" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::queue:io.reactivex.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onNext(T):void" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onNext(T):void" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onComplete():void" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::innerComplete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableRange$BaseRangeSubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableFromArray$BaseArraySubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter::onNext(T):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::run():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.internal.queue.BaseArrayQueue" />
			<role name="TemplateMethod()" element="io.reactivex.internal.queue.BaseArrayQueue::clear():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Completable" />
			<role name="TemplateMethod()" element="io.reactivex.Completable::subscribe(io.reactivex.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.disposables.ReferenceDisposable" />
			<role name="TemplateMethod()" element="io.reactivex.disposables.ReferenceDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.flowables.ConnectableFlowable" />
			<role name="TemplateMethod()" element="io.reactivex.flowables.ConnectableFlowable::connect():io.reactivex.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.flowables.ConnectableFlowable::autoConnect(int, io.reactivex.functions.Consumer):io.reactivex.Flowable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Maybe" />
			<role name="TemplateMethod()" element="io.reactivex.Maybe::subscribe(io.reactivex.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Observable" />
			<role name="TemplateMethod()" element="io.reactivex.Observable::subscribe(io.reactivex.Observer):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Single" />
			<role name="TemplateMethod()" element="io.reactivex.Single::subscribe(io.reactivex.SingleObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Scheduler" />
			<role name="TemplateMethod()" element="io.reactivex.Scheduler::scheduleDirect(java.lang.Runnable, long, java.util.concurrent.TimeUnit):io.reactivex.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.Scheduler::schedulePeriodicallyDirect(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):io.reactivex.disposables.Disposable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Flowable" />
			<role name="TemplateMethod()" element="io.reactivex.Flowable::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.Scheduler$Worker" />
			<role name="TemplateMethod()" element="io.reactivex.Scheduler$Worker::schedule(java.lang.Runnable):io.reactivex.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.Scheduler$Worker::schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):io.reactivex.disposables.Disposable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.observables.ConnectableObservable" />
			<role name="TemplateMethod()" element="io.reactivex.observables.ConnectableObservable::connect():io.reactivex.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.observables.ConnectableObservable::autoConnect(int, io.reactivex.functions.Consumer):io.reactivex.Observable" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.schedulers.IoScheduler$EventLoopWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::dispose():void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.operators.maybe.MaybeAmbArray$AmbMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.schedulers.SingleScheduler$ScheduledWorker" />
			<role name="RealSubject" element="io.reactivex.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.internal.schedulers.SingleScheduler$ScheduledWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferCloseSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferOpenSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferBoundarySubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundary$BufferOpenSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber" />
			<role name="RealSubject" element="io.reactivex.subjects.UnicastSubject" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindow$WindowExactSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySupplierSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$BufferBoundarySubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundarySubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundarySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundarySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber$DebounceInnerSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableDebounce$DebounceSubscriber$DebounceInnerSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryMainSubscriber" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$WindowBoundaryInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$1" />
			<role name="RealSubject" element="io.reactivex.observers.SerializedObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableSkipUntil$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$1" />
			<role name="RealSubject" element="io.reactivex.observers.SerializedObserver" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableTakeUntil$1::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter" />
			<role name="RealSubject" element="io.reactivex.internal.operators.flowable.FlowableCreate$BaseEmitter" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::setDisposable(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::setCancellable(io.reactivex.functions.Cancellable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::requested():long" />
			<role name="Request()" element="io.reactivex.internal.operators.flowable.FlowableCreate$SerializedEmitter::isCancelled():boolean" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="Proxy" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber" />
			<role name="RealSubject" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber" />
			<role name="Subject" element="io.reactivex.Observer" />
			<role name="subject" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::actual:io.reactivex.Observer" />
			<role name="subject" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::inner:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::onSubscribe(io.reactivex.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber::onError(java.lang.Throwable):void" />
			<role name="subject" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber::actual:io.reactivex.Observer" />
			<role name="Request()" element="io.reactivex.internal.operators.observable.ObservableConcatMap$SourceSubscriber$InnerSubscriber::onError(java.lang.Throwable):void" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility" />
</system>

