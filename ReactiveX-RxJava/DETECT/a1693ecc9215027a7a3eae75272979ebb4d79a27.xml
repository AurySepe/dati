<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.internal.fuseable.FuseToFlowable" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.internal.fuseable.FuseToFlowable::fuseToFlowable():io.reactivex.rxjava3.core.Flowable" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.internal.fuseable.FuseToMaybe" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.internal.fuseable.FuseToMaybe::fuseToMaybe():io.reactivex.rxjava3.core.Maybe" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.internal.fuseable.FuseToObservable" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.internal.fuseable.FuseToObservable::fuseToObservable():io.reactivex.rxjava3.core.Observable" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier::call():io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.core.FlowableEmitter" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.core.FlowableEmitter::serialize():io.reactivex.rxjava3.core.FlowableEmitter" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.core.Scheduler::createWorker():io.reactivex.rxjava3.core.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.core.Scheduler$Worker::schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.disposables.Disposable" />
		</instance>
		<instance>
			<role name="Creator" element="io.reactivex.rxjava3.core.ObservableEmitter" />
			<role name="FactoryMethod()" element="io.reactivex.rxjava3.core.ObservableEmitter::serialize():io.reactivex.rxjava3.core.ObservableEmitter" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.disposables.DisposableHelper" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.disposables.DisposableHelper::DISPOSED:io.reactivex.rxjava3.internal.disposables.DisposableHelper" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.util.NotificationLite" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.util.NotificationLite::COMPLETE:io.reactivex.rxjava3.internal.util.NotificationLite" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.util.HashMapSupplier" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.util.HashMapSupplier::INSTANCE:io.reactivex.rxjava3.internal.util.HashMapSupplier" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.util.ListAddBiConsumer" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.util.ListAddBiConsumer::INSTANCE:io.reactivex.rxjava3.internal.util.ListAddBiConsumer" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.util.EmptyComponent" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.util.EmptyComponent::INSTANCE:io.reactivex.rxjava3.internal.util.EmptyComponent" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.util.ArrayListSupplier" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.util.ArrayListSupplier::INSTANCE:io.reactivex.rxjava3.internal.util.ArrayListSupplier" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.subscriptions.EmptySubscription" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.subscriptions.EmptySubscription::INSTANCE:io.reactivex.rxjava3.internal.subscriptions.EmptySubscription" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper::CANCELLED:io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.functions.Functions$HashSetCallable" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.functions.Functions$HashSetCallable::INSTANCE:io.reactivex.rxjava3.internal.functions.Functions$HashSetCallable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.functions.Functions$NaturalComparator" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.functions.Functions$NaturalComparator::INSTANCE:io.reactivex.rxjava3.internal.functions.Functions$NaturalComparator" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler::INSTANCE:io.reactivex.rxjava3.internal.schedulers.TrampolineScheduler" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToFlowable" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToFlowable::INSTANCE:io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToFlowable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$NoSuchElementCallable" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$NoSuchElementCallable::INSTANCE:io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$NoSuchElementCallable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToObservable" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToObservable::INSTANCE:io.reactivex.rxjava3.internal.operators.single.SingleInternalHelper$ToObservable" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher::INSTANCE:io.reactivex.rxjava3.internal.operators.maybe.MaybeToPublisher" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeNever" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeNever::INSTANCE:io.reactivex.rxjava3.internal.operators.maybe.MaybeNever" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty::INSTANCE:io.reactivex.rxjava3.internal.operators.maybe.MaybeEmpty" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$RequestMax" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$RequestMax::INSTANCE:io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$RequestMax" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$MapToInt" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$MapToInt::INSTANCE:io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$MapToInt" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.subscribers.TestSubscriber$EmptySubscriber" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.subscribers.TestSubscriber$EmptySubscriber::INSTANCE:io.reactivex.rxjava3.subscribers.TestSubscriber$EmptySubscriber" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.observers.TestObserver$EmptyObserver" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.observers.TestObserver$EmptyObserver::INSTANCE:io.reactivex.rxjava3.observers.TestObserver$EmptyObserver" />
		</instance>
		<instance>
			<role name="Singleton" element="io.reactivex.rxjava3.core.Notification" />
			<role name="uniqueInstance" element="io.reactivex.rxjava3.core.Notification::COMPLETE:io.reactivex.rxjava3.core.Notification" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver::serial:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::arbiter:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::sd:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::upstream:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::upstream:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::upstream:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::arbiter:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$CombinerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$CombinerObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$CombinerObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$CombinerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$CombinerObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::error:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipCoordinator" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundary$WindowBoundaryMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$TryTerminateAndReportDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$TryTerminateAndReportDisposable::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$TryTerminateAndReportDisposable::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$TryTerminateAndReportDisposable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::innerError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.OpenHashSet" />
			<role name="adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable::resources:io.reactivex.rxjava3.internal.util.OpenHashSet" />
			<role name="Request()" element="io.reactivex.rxjava3.disposables.CompositeDisposable::add(io.reactivex.rxjava3.disposables.Disposable):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.disposables.CompositeDisposable::delete(io.reactivex.rxjava3.disposables.Disposable):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber::main:io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::observer1:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::observer2:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::parent:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::isDisposed():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::parent:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::observer1:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::observer2:io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver::parent:io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::inner:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver$ConcatMapMaybeObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::INNER_DISPOSED:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver$SwitchMapMaybeObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::bufferOpen:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::sampler:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::fallback:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::onTimeout(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::boundary:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::inner:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver$ConcatMapSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::INNER_DISPOSED:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver$SwitchMapSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipSingleObserver::parent:io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCache$CacheDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCache" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCache$CacheDisposable::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableCache" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCache$CacheDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.BehaviorSubject$BehaviorDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.BehaviorSubject" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.BehaviorSubject$BehaviorDisposable::state:io.reactivex.rxjava3.subjects.BehaviorSubject" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.BehaviorSubject$BehaviorDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.PublishSubject" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::parent:io.reactivex.rxjava3.subjects.PublishSubject" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.ReplaySubject$ReplayDisposable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$ReplayDisposable::state:io.reactivex.rxjava3.subjects.ReplaySubject" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$ReplayDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver::parent:io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::inner:io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber$ConcatInnerObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::inner:io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::inner:io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver$ConcatMapInnerObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::INNER_DISPOSED:io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver$SwitchMapInnerObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable$MergeWithObserver$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen" />
			<role name="Adaptee" element="io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::workerProcessor:io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::createWorker():io.reactivex.rxjava3.core.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$QueueWorker" />
			<role name="Adaptee" element="io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$QueueWorker::actionProcessor:io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$QueueWorker::schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.disposables.Disposable" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber::onTimeout(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber::onTimeout(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber::timer:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber::timer:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::first:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::second:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::isDisposed():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::other:io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilOtherSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.BackpressureStrategy" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::backpressure:io.reactivex.rxjava3.core.BackpressureStrategy" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.FlowableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::source:io.reactivex.rxjava3.core.FlowableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::subscribers:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate::source:io.reactivex.rxjava3.core.ObservableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::innerError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::error:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable$BlockingObservableIterator::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::first:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::second:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::observer:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver::errors:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleCache" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleCache$CacheDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleCache$CacheDisposable::parent:io.reactivex.rxjava3.internal.operators.single.SingleCache" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCache$CacheDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::next:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$ScheduledAction" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$CreateWorkerFunction$WorkerCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$CreateWorkerFunction$WorkerCompletable::action:io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$ScheduledAction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$CreateWorkerFunction$WorkerCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleOnSubscribe" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate::source:io.reactivex.rxjava3.core.SingleOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeOnSubscribe" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate::source:io.reactivex.rxjava3.core.MaybeOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableOnSubscribe" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate::source:io.reactivex.rxjava3.core.CompletableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableOperator" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift::onLift:io.reactivex.rxjava3.core.CompletableOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::runSync():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::runAsync():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::runBackfused():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed$WindowExactUnboundedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::error:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccessMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onErrorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::valueSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::debounceSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onNextMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onErrorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::valueSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::errorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::resumeFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::nextFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle$MergeWithObserver$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber$ConcatMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber$SwitchMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe$MergeWithObserver$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver::other:io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber$ConcatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver::parent:io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber$SwitchMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$RepeatSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$RepeatSubscriber::sa:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeat$RepeatSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::sa:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber::sa:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryBiPredicate$RetryBiSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber::sa:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$SwitchIfEmptySubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$SwitchIfEmptySubscriber::arbiter:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchIfEmpty$SwitchIfEmptySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$FallbackSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$FallbackSubscriber::arbiter:io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$FallbackSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable$MergeWithSubscriber$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::subscribers:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::nextSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay::bufferFactory:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate::stateSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable::source:io.reactivex.rxjava3.core.Flowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onAfterSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onAfterSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.LambdaObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate::stateSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$Node" />
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::tail:io.reactivex.rxjava3.subjects.ReplaySubject$Node" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::head:io.reactivex.rxjava3.subjects.ReplaySubject$Node" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::trimHead():void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::replay(io.reactivex.rxjava3.subjects.ReplaySubject$ReplayDisposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$TimedNode" />
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::tail:io.reactivex.rxjava3.subjects.ReplaySubject$TimedNode" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::head:io.reactivex.rxjava3.subjects.ReplaySubject$TimedNode" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::addFinal(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::trimHead():void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.ReplaySubject" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject::buffer:io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::hasThrowable():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$FlowableWithLatestSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$FlowableWithLatestSubscriber::wlf:io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$FlowableWithLatestSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$Node" />
			<role name="Adapter" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::tail:io.reactivex.rxjava3.processors.ReplayProcessor$Node" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::head:io.reactivex.rxjava3.processors.ReplayProcessor$Node" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::next(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::trimHead():void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::getValues(T[]):java.lang.Object[]" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::replay(io.reactivex.rxjava3.processors.ReplayProcessor$ReplaySubscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeBoundReplayBuffer::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$TimedNode" />
			<role name="Adapter" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::head:io.reactivex.rxjava3.processors.ReplayProcessor$TimedNode" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::tail:io.reactivex.rxjava3.processors.ReplayProcessor$TimedNode" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::trimHead():void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::next(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onCompleteSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onCompleteSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeDelayErrorArray$MergeInnerCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable::observable:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onDispose:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onAfterTerminate:io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.LambdaObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::disposables:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerComplete(io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::disposables:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::innerComplete(io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin" />
			<role name="Adaptee" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull" />
			<role name="Adaptee" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin" />
			<role name="Adaptee" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::buffer:io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onNext:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.rxjava3.processors.ReplayProcessor" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor::buffer:io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::hasThrowable():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowExactUnboundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeInterval$TimeIntervalSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::observer:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::errorHandler:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::errorHandler:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber::combiner:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFrom$WithLatestFromSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::errorHandler:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::errorHandler:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::error:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::parent:io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::buffer:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer::maybeSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer::singleSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleError" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleError::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::reducer:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::reducer:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::accumulator:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::accumulator:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::zipper:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiFunction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::combiner:io.reactivex.rxjava3.functions.BiFunction" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle::single:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber::filter:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::parent:io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::innerClose(boolean, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::innerClose(boolean, io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable::upstream:io.reactivex.rxjava3.core.Observable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::queue:io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::set:io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::innerClose(boolean, io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::queue:io.reactivex.rxjava3.internal.queue.SpscLinkedArrayQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::innerValue(boolean, java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::innerClose(boolean, io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::error:io.reactivex.rxjava3.internal.util.AtomicThrowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay::bufferFactory:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource" />
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource::bufferFactory:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource::subscribe(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter::serial:io.reactivex.rxjava3.internal.disposables.SequentialDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter::isCancelled():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter::setDisposable(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onEvent:io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::collector:io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::collector:io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver::onCallback:io.reactivex.rxjava3.functions.BiConsumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer::completableSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::singleFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::comparer:io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::observer:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer::action:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer::accept(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::comparer:io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::comparer:io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::completableFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::predicate:io.reactivex.rxjava3.functions.BiPredicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction::run:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Action" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::action:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::get():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver" />
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::stop:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$SizeAndTimeBoundReplayBuffer::truncate():void" />
		</instance>
		<instance>
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn" />
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Adapter" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::next(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Adapter" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer" />
			<role name="adaptee" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::add(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject$SizeAndTimeBoundReplayBuffer::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::resourceDisposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Adapter" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse" />
			<role name="adaptee" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse::supplier:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse::test(T):boolean" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite" />
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen" />
			<role name="component" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::actualScheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::createWorker():io.reactivex.rxjava3.core.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay" />
			<role name="Component" element="io.reactivex.rxjava3.flowables.ConnectableFlowable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay::cf:io.reactivex.rxjava3.flowables.ConnectableFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ConnectableFlowableReplay::reset():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.processors.SerializedProcessor" />
			<role name="Component" element="io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="component" element="io.reactivex.rxjava3.processors.SerializedProcessor::actual:io.reactivex.rxjava3.processors.FlowableProcessor" />
			<role name="Operation()" element="io.reactivex.rxjava3.processors.SerializedProcessor::hasSubscribers():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.processors.SerializedProcessor::hasThrowable():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.processors.SerializedProcessor::getThrowable():java.lang.Throwable" />
			<role name="Operation()" element="io.reactivex.rxjava3.processors.SerializedProcessor::hasComplete():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelConcatMap::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFlatMap::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelPeek::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce::parallelism():int" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::parallelism():int" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.observers.BlockingBaseObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.observers.BlockingBaseObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BlockingBaseObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$DelayMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::other:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::timer:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::timer:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::isDisposed():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::disposable:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.observers.SafeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.observers.SafeObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.observers.SerializedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="component" element="io.reactivex.rxjava3.observers.SerializedObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.observers.ResumeSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.observers.ResumeSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.ResumeSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.ResumeSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver$OtherSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver$OtherSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver$OtherSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver$OtherSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaterializeSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleAmb$AmbSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleContains$ContainsSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleContains$ContainsSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleContains$ContainsSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleContains$ContainsSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleContains$ContainsSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDetach$DetachSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnDispose$DoOnDisposeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnError$DoOnError" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnError$DoOnError::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnError$DoOnError::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnError$DoOnError::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnError$DoOnError::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent$DoOnEvent" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent$DoOnEvent::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent$DoOnEvent::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent$DoOnEvent::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnEvent$DoOnEvent::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess$DoOnSuccess" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess$DoOnSuccess::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess$DoOnSuccess::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess$DoOnSuccess::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSuccess$DoOnSuccess::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate$DoOnTerminate" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate$DoOnTerminate::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate$DoOnTerminate::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate$DoOnTerminate::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminate$DoOnTerminate::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleEquals$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback$FlatMapSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback$FlatMapSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback$FlatMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleHide$HideSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::t:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleObserveOn$ObserveOnSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn$OnErrorReturn" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn$OnErrorReturn::observer:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn$OnErrorReturn::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn$OnErrorReturn::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleOnErrorReturn$OnErrorReturn::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil$TakeUntilMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOn$UnsubscribeOnSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb$AmbMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay$DelayMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay$DelayMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay$DelayMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$DelayMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$DelayWithMainObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDetach$DetachMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEvent$DoOnEventMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate$DoOnTerminate::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver$InnerObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver$InnerObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver$InnerObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver$InnerObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeHide$HideMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElement$IgnoreMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmpty$IsEmptyMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeObserveOn$ObserveOnMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver$NextMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybePeek$MaybePeekObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeOnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$OtherMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$OtherMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$OtherMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$OtherMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver$OtherMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilMaybe$TakeUntilMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$TakeUntilMainMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$TakeUntilMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$TakeUntilMainMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$TakeUntilMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisher$TakeUntilMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOn$UnsubscribeOnMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onSuccess(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter$ParallelFilterConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry$ParallelFilterConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber" />
			<role name="Component" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbInnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbInnerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbInnerObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbInnerObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbInnerObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect$CollectObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCount$CountObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed$DebounceTimedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay$DelayObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver::child:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOther$DelayObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDetach$DetachObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt$ElementAtObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableHide$HideDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElements$IgnoreObservable::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMaterialize$MaterializeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe$MergeWithObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle$MergeWithObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$TargetObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRefCount$RefCountObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScan$ScanObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed$ScanSeedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkip$SkipObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLast$SkipLastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimed$SkipLastTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntilObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTake$TakeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast$TakeLastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne$TakeLastOneObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimed$TakeLastTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed$DebounceTimedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest$ThrottleLatestObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval$TimeIntervalObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$FallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList$ToListObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOn$UnsubscribeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowSkipObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFrom$WithLatestFromObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZipIterable$ZipIterableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObserverResourceWrapper::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.observers.SafeObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.observers.SafeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SafeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.observers.SerializedObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.observers.SerializedObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.SerializedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.observers.TestObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.Observer" />
			<role name="component" element="io.reactivex.rxjava3.observers.TestObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.TestObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.TestObserver::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.TestObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.TestObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAmb$Amb::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$NextObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$NextObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$NextObserver::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$NextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::actualObserver:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable$ConcatInnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDelay$Delay::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDetach$DetachCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOn$DisposeOnObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent$DoOnEvent" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent$DoOnEvent::observer:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent$DoOnEvent::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent$DoOnEvent::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnEvent$DoOnEvent::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableHide$HideCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableObserveOn$ObserveOnCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletablePeek$CompletableObserverImplementation::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::onComplete():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$TimeOutObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="Component" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplier::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.functions.Functions$NotificationOnNext" />
			<role name="component" element="io.reactivex.rxjava3.internal.functions.Functions$NotificationOnNext::onNotification:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.functions.Functions$NotificationOnNext::accept(T):void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.observables.ConnectableObservable" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$Replay" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$Replay::co:io.reactivex.rxjava3.observables.ConnectableObservable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$Replay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$Replay::reset():void" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.subjects.Subject" />
			<role name="Decorator" element="io.reactivex.rxjava3.subjects.SerializedSubject" />
			<role name="component" element="io.reactivex.rxjava3.subjects.SerializedSubject::actual:io.reactivex.rxjava3.subjects.Subject" />
			<role name="Operation()" element="io.reactivex.rxjava3.subjects.SerializedSubject::hasObservers():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.subjects.SerializedSubject::hasThrowable():boolean" />
			<role name="Operation()" element="io.reactivex.rxjava3.subjects.SerializedSubject::getThrowable():java.lang.Throwable" />
			<role name="Operation()" element="io.reactivex.rxjava3.subjects.SerializedSubject::hasComplete():boolean" />
		</instance>
		<instance>
			<role name="Component" element="io.reactivex.rxjava3.core.ObservableEmitter" />
			<role name="Decorator" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter" />
			<role name="component" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::emitter:io.reactivex.rxjava3.core.ObservableEmitter" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::setDisposable(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::setCancellable(io.reactivex.rxjava3.functions.Cancellable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$SerializedEmitter::isDisposed():boolean" />
		</instance>
	</pattern>
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable" />
			<role name="state" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.PublishSubject$PublishDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbCoordinator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbCoordinator::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAmb$AmbCoordinator::subscribe(io.reactivex.rxjava3.core.ObservableSource):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::subscribe(io.reactivex.rxjava3.core.ObservableSource):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator::subscribe(io.reactivex.rxjava3.core.ObservableSource, int):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::observer:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::tryOnError(java.lang.Throwable):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate$CreateEmitter::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromPublisher$PublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval$IntervalObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval$IntervalObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval$IntervalObserver::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange$IntervalRangeObserver::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimer$TimerObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimer$TimerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimer$TimerObserver::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel" />
			<role name="state" element="io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel::cancel(boolean):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable$FromCompletableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle$FromSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe$ElementAtObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe$LastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe$ReduceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe$SingleElementObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::innerSuccess(T, int):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::innerError(java.lang.Throwable, int):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::innerComplete(int):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe$ElementAtSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe$LastSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe$ReduceSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleMaybe$SingleElementSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate$Emitter::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$TimerDisposable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$TimerDisposable::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer$TimerDisposable::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen$RepeatWhenObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen$RepeatWhenObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable$AndThenObservableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::bufferOpen:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeat$RepeatObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate$RetryBiObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty$SwitchIfEmptyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::fallback:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onTimeout(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::fallback:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutFallbackObserver::onTimeout(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::boundary:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::open:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onSuccess(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains$ContainsMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onSuccess(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount$CountMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle$IsEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle$ToSingleMaybeSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle$CollectObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle$CountObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle$ElementAtObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle$LastObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle$ReduceSeedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle$SingleElementObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle$ToListObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator::innerSuccess(T, int):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator::innerError(java.lang.Throwable, int):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle$CollectSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCountSingle$CountSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle$ElementAtSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLastSingle$LastSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceSeedSingle$ReduceSeedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualSingle$EqualCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleSingle$SingleElementSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle$ToListSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::done():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualCoordinator::error(io.reactivex.rxjava3.internal.operators.maybe.MaybeEqualSingle$EqualObserver, java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromPublisher$ToSingleObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleTimer$TimerDisposable" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleTimer$TimerDisposable::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimer$TimerDisposable::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::first:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::second:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::subscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::first:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::second:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::subscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable$IgnoreMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable$IgnoreObservable::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::innerError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate$Emitter::tryOnError(java.lang.Throwable):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher$FromPublisherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer$TimerDisposable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer$TimerDisposable::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimer$TimerDisposable::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable$IgnoreElementsSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::timer:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed$DebounceTimedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher$AndThenPublisherSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver" />
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver::disposable:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver::cancel():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate" />
			<role name="State" element="io.reactivex.rxjava3.core.FlowableOnSubscribe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::source:io.reactivex.rxjava3.core.FlowableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLift" />
			<role name="State" element="io.reactivex.rxjava3.core.FlowableOperator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLift::operator:io.reactivex.rxjava3.core.FlowableOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableLift::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapInnerSubscriber::onNext(R):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::onNext(io.reactivex.rxjava3.core.CompletableSource):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcat$CompletableConcatSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::cancel():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::clear():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::isEmpty():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$PublishConnection" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$PublishConnection::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$PublishConnection::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublish$PublishConnection::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast$MulticastProcessor::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::clear():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher::cancel(int):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher::drainAsync():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelFromPublisher$ParallelDispatcher::drainSync():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Context" element="io.reactivex.rxjava3.processors.MulticastProcessor" />
			<role name="state" element="io.reactivex.rxjava3.processors.MulticastProcessor::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.MulticastProcessor::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.MulticastProcessor::offer(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.MulticastProcessor::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableIterable::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent::iterator():java.util.Iterator" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableOnSubscribe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate::source:io.reactivex.rxjava3.core.ObservableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCreate::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLift" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableOperator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLift::operator:io.reactivex.rxjava3.core.ObservableOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLift::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drainAndDispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::innerError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeContains::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCount::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::drainNormal():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::checkTerminated(boolean, boolean, io.reactivex.rxjava3.core.Observer):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::poll():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::clear():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::isEmpty():boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapInnerObserver::onNext(R):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable::complete(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable::error(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DeferredScalarDisposable::complete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::observer:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray$FromArrayDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray$FromArrayDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromArray$FromArrayDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$FromIterableDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$FromIterableDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterable$FromIterableDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRange$RangeDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRange$RangeDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRange$RangeDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$RangeDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$RangeDisposable::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLong$RangeDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable::observer:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarDisposable::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Observer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::fallback:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::otherComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::fallback:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::otherComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty$SwitchIfEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybe$ConcatWithSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver::sources:io.reactivex.rxjava3.core.MaybeSource[]" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArray$ConcatMaybeObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver::sources:io.reactivex.rxjava3.core.MaybeSource[]" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayDelayError$ConcatMaybeObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybe$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleSubscribeOn$SubscribeOnObserver::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingle$SwitchIfEmptyMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithSingle$OtherObserver::onSuccess(U):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::next:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletable$SourceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::sources:io.reactivex.rxjava3.core.CompletableSource[]" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableConcatArray$ConcatInnerObserver::next():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOn$SubscribeOnObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable$ConcatWithSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletable$ConcatWithObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher$OtherSubscriber::subscribeNext():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable$OtherObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleOnSubscribe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate::source:io.reactivex.rxjava3.core.SingleOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleCreate::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleLift" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleOperator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleLift::onLift:io.reactivex.rxjava3.core.SingleOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleLift::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable" />
			<role name="State" element="io.reactivex.rxjava3.internal.disposables.DisposableContainer" />
			<role name="state" element="io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable::tasks:io.reactivex.rxjava3.internal.disposables.DisposableContainer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker$InterruptibleRunnable::cleanup():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingle$ConcatWithSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeOnSubscribe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate::source:io.reactivex.rxjava3.core.MaybeOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCreate::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeLift" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeOperator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeLift::operator:io.reactivex.rxjava3.core.MaybeOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeLift::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeSubscribeOn$SubscribeTask::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableOnSubscribe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate::source:io.reactivex.rxjava3.core.CompletableOnSubscribe" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableCreate::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableOperator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift::onLift:io.reactivex.rxjava3.core.CompletableOperator" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableLift::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$ArrayConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$IteratorConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::runSync():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnConditionalSubscriber::runAsync():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::fastPath():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$RangeConditionalSubscription::slowPath(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler::DISPOSED:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler::&lt;clinit&gt;():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$DisposeTask" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$DisposeTask::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout$DisposeTask::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Context" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$OnCompletedAction" />
			<role name="state" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$OnCompletedAction::actionCompletable:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$OnCompletedAction::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapDelayErrorObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::close:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEager$ConcatMapEagerMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccessMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onErrorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatten$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMap$MapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::valueSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorReturn$OnErrorReturnMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletable$ConcatMapCompletableObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapMaybe$ConcatMapMaybeMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingle$ConcatMapSingleMainObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable$SwitchMapCompletableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe$SwitchMapMaybeMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingle$SwitchMapSingleMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::debounceSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize$DematerializeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMap$MergeObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable$FlattenIterableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy$GroupByObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onNextMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onErrorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::valueSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorReturn$OnErrorReturnObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDematerialize$DematerializeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::bufferClose:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::open(Open):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::leftEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::rightEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$GroupJoinDisposable::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::leftEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::rightEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableJoin$JoinDisposable::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutFallbackObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::errorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNext$ResumeNextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelector$FlatMapBiMainObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElement$FlatMapMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::resumeFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorNext$OnErrorNextMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::zipper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray$ZipCoordinator::innerSuccess(T, int):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable$ConcatMapCompletableObserver::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable$SwitchMapCompletableObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable$FlatMapObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservable$FlatMapObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatest$LatestCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromMany$WithLatestFromObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator::zipper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybe$FlatMapSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::nextFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleResumeNext$ResumeMainSingleObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator::zipper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleZipArray$ZipCoordinator::innerSuccess(T, int):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherPublisher$OtherSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn$ObserveOnObserver::drainNormal():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable$ObserverCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservable$MaybeToObservableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleToObservable$SingleToObservableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleToObservable$SingleToObservableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleToObservable$SingleToObservableObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipCoordinator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipCoordinator::zipper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableZip$ZipCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayPublisher" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayPublisher::bufferFactory:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayPublisher::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::w:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed$WindowSkipSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable::other:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCountSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceSeedSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable$CompletableFromObservableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable$CompletableFromObservableObserver::co:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable$CompletableFromObservableObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable$CompletableFromObservableObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable$CompletableFromObservableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybe::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray::sources:io.reactivex.rxjava3.core.MaybeSource[]" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapEager$ConcatMapEagerDelayErrorSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMap$MergeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSwitchMap$SwitchMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::bufferClose:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::open(Open):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$DebounceSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$DebounceSubscriber::debounceSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce$DebounceSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerialize$DematerializeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$DistinctSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct$DistinctSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletable$FlatMapCompletableMainSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybe$FlatMapMaybeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingle$FlatMapSingleSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::drain():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable$FlattenIterableSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onNextMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onErrorMapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber::nextSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorNext$OnErrorNextSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber::valueSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturn$OnErrorReturnSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutFallbackSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber::itemTimeoutIndicator:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber::close:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundarySelector$WindowBoundaryMainSubscriber::drainLoop():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapMaybe$ConcatMapMaybeSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingle$ConcatMapSingleSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybe$SwitchMapMaybeSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapSingle$SwitchMapSingleSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapPublisher$FlatMapPublisherSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapPublisher$SingleFlatMapPublisherObserver::onSuccess(S):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable$FlatMapCompletableMainObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::nextSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorNext$OnErrorNextObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$DistinctObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$DistinctObserver::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$DistinctObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct$DistinctObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMap$MapObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMap$MapObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMap$MapObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMap$MapObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onNext(R):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeToFlowable$MaybeToFlowableSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::cancel():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable$SingleToFlowableObserver" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable$SingleToFlowableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleToFlowable$SingleToFlowableObserver::cancel():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay::bufferFactory:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect::initialSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollect::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDefer::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinct::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableError::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate::stateSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable::connectableFactory:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed::seedSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToList" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToList::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToList::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenPublisher::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::disposeResource():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onAfterSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::disposeResource():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing$UsingObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing$UsingObserver::disposeResource():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onAfterSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccess$DoAfterObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing$UsingSingleObserver::disposeResource():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ConsumerSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.LambdaObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onSuccess:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::disposeState:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate$GeneratorDisposable::dispose(S):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.plugins.RxJavaPlugins" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.plugins.RxJavaPlugins::errorHandler:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.plugins.RxJavaPlugins::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect::initialSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollect::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDefer::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableError::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate::stateSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGenerate::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay::connectableFactory:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed::seedSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScanSeed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToList::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy::mapFactory:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupBy::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen::handler:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatWhen::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$MulticastFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen::handler:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWhen::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap$ScalarXMapFlowable::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.subjects.ReplaySubject" />
			<role name="State" element="io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer" />
			<role name="state" element="io.reactivex.rxjava3.subjects.ReplaySubject::buffer:io.reactivex.rxjava3.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::cleanupBuffer():void" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::hasThrowable():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::hasValue():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::size():int" />
			<role name="Request()" element="io.reactivex.rxjava3.subjects.ReplaySubject::terminate(java.lang.Object):io.reactivex.rxjava3.subjects.ReplaySubject$ReplayDisposable[]" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber::downstream:io.reactivex.rxjava3.internal.fuseable.ConditionalSubscriber" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn$RunOnConditionalSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInterval::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRange::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOn::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleFirstTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatest::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowTimed::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutSelectorSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeout$TimeoutConsumer::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactBoundedSubscriber::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactBoundedObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferSkipBoundedObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferExactBoundary$BufferExactBoundarySubscriber::next():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onCompleteSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotification$FlatMapMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferExactObserver::createBuffer():boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBuffer$BufferSkipObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver::next():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed$BufferExactUnboundedObserver::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onCompleteSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMapNotification$MapNotificationObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::open(Open):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferExactUnboundedSubscriber::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.CompletableAndThenObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable::observable:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.mixed.MaybeFlatMapObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe::other:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe" />
			<role name="State" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe::source:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSingleMaybe::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen::handler:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatWhen::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay::selector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$MulticastReplay::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen::handler:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWhen::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMap$ScalarXMapObservable::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightEndObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableGroupJoin$LeftRightObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::onDispose:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.DisposableLambdaObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinally$DoFinallyObserver::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinally$DoFinallyObserver::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onAfterTerminate:io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEach$DoOnEachObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::onAfterTerminate:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminate$DoAfterTerminateObserver::onAfterTerminate():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoFinally$DoFinallyObserver::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.LambdaObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.LambdaObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeCallbackObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightEndSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$JoinSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onNext(java.lang.Object):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$LeftRightSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTimed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDelay::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInterval::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRange::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOn::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleFirstTimed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatest::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowTimed::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin" />
			<role name="State" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull" />
			<role name="State" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduceFull::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin" />
			<role name="State" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin::source:io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelSortedJoin::subscribeActual(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::buffer:io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay$ReplaySubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferExactSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferOverlappingSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer$PublisherBufferSkipSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary$BufferBoundarySubscriber::open(Open):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::bufferSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed$BufferSkipBoundedSubscriber::run():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onCompleteSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotification$MapNotificationSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFilterSingle$FilterMaybeObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorComplete$OnErrorCompleteMaybeObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAll$AllObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAllSingle$AllObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAny$AnyObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableAnySingle$AnyObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhile$SkipWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate$TakeUntilPredicateObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTakeWhile$TakeWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onNext:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.ForEachWhileObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAllSingle$AllSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAnySingle$AnySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onNext:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.ForEachWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutConsumer" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutConsumer::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutSelectorSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeout$TimeoutConsumer::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutFallbackSubscriber::startTimeout(long):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber::worker:io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber::startTimeout(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.processors.ReplayProcessor" />
			<role name="State" element="io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer" />
			<role name="state" element="io.reactivex.rxjava3.processors.ReplayProcessor::buffer:io.reactivex.rxjava3.processors.ReplayProcessor$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::subscribeActual(org.reactivestreams.Subscriber):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::getThrowable():java.lang.Throwable" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::cleanupBuffer():void" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::getValue():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::hasComplete():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::hasThrowable():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::hasValue():boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.processors.ReplayProcessor::size():int" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableFlowable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::observer:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle$ToSingle::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::parent:io.reactivex.rxjava3.internal.observers.InnerQueuedObserverSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.observers.InnerQueuedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::buffer:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayBuffer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::replay():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplayObserver::replayFinal():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.plugins.RxJavaPlugins" />
			<role name="State" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.rxjava3.plugins.RxJavaPlugins::onBeforeBlocking:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.plugins.RxJavaPlugins::onBeforeBlocking():boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer::maybeSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDefer::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeErrorCallable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber::parent:io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinInnerSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber::onAfterNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber::onDrop:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureDrop$BackpressureDropSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$UsingSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$UsingSubscriber::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$UsingSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$UsingSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableUsing$UsingSubscriber::disposeResource():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualCoordinatorHelper" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqual$EqualSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservable$FlatMapIterableObserver::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle::initialSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle::seedSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableToListSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle::initialSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableCollectSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle::seedSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReduceWithSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle::collectionSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableToListSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer::singleSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDefer::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleError" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleError::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleError::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFromSupplier::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::drainAsync():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatest$CombineLatestCoordinator::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDistinctUntilChanged$DistinctUntilChangedConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapConditionalSubscriber" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask::parent:io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDelayWithCompletable::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle::single:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableToSingle::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAll$AllSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAll$AllSubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAll$AllSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$AnySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$AnySubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableAny$AnySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber::filter:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryPredicate$RetrySubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipWhile$SkipWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate$InnerSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhile$TakeWhileSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::parent:io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriberSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.subscribers.InnerQueuedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::predicate:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate$RepeatObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFilter$FilterObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFilter$FilterObserver::filter:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFilter$FilterObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFilter$FilterObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableUsing::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable::other:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayWithCompletable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.CompletableSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable::source:io.reactivex.rxjava3.core.CompletableSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletable::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable" />
			<role name="State" element="io.reactivex.rxjava3.core.MaybeSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable::source:io.reactivex.rxjava3.core.MaybeSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementCompletable::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter" />
			<role name="State" element="io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::queue:io.reactivex.rxjava3.internal.fuseable.SimplePlainQueue" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::drainLoop():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallySubscriber::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onAfterTerminate:io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onCancel:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::cancel():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::onOverflow:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer$BackpressureBufferSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber::onOverflow:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$OnBackpressureBufferStrategySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$DoAfterObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$DoAfterObserver::onAfterNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$DoAfterObserver::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNext$DoAfterObserver::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::queue:io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$SimpleQueueWithConsumerIndex" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::poll():java.lang.Object" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::drainNormal():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray$MergeMaybeObserver::drainFused():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle::other:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingle::subscribeActual(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMap$ParallelMapConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTryConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::combiner:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromMany$WithLatestFromSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::mapper:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelMapTry$ParallelMapTrySubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinally$DoFinallyObserver::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSubscribe:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleDoOnSubscribe$DoOnSubscribeSingleObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Predicate" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::filter:io.reactivex.rxjava3.functions.Predicate" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFilter$FilterConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutTask" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutTask::parent:io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutSupport" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed$TimeoutTask::run():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay::bufferFactory:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay::connect(io.reactivex.rxjava3.functions.Consumer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource" />
			<role name="State" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource::bufferFactory:io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BufferSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$ReplaySource::subscribe(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber::onFinally:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinally$DoFinallyConditionalSubscriber::runFinally():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onAfterTerminate:io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onComplete:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer::completableSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableDefer::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier::errorSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableErrorSupplier::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier::supplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplier::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::resourceSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::sourceSupplier:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::singleFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextConditionalSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber::onAfterNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext$DoAfterConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onNext(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::tryOnNext(T):boolean" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach$DoOnEachConditionalSubscriber::poll():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::onNext:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelDoOnNextTry$ParallelDoOnNextSubscriber::tryOnNext(T):boolean" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer" />
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer::action:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$ActionConsumer::accept(T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeySelector" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeySelector::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeySelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeyValueSelector" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeyValueSelector::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeyValueSelector::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$ToMapKeyValueSelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.functions.Functions$ToMultimapKeyValueSelector" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMultimapKeyValueSelector::keySelector:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMultimapKeyValueSelector::collectionFactory:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$ToMultimapKeyValueSelector::valueSelector:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$ToMultimapKeyValueSelector::accept(java.util.Map, T):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::completableFunction:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableUsing::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.LongConsumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::onRequest:io.reactivex.rxjava3.functions.LongConsumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle$SubscriptionLambdaSubscriber::request(long):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle" />
			<role name="State" element="io.reactivex.rxjava3.core.SingleSource" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle::source:io.reactivex.rxjava3.core.SingleSource" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSingle::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$GeneratorSubscription" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$GeneratorSubscription::disposeState:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerate$GeneratorSubscription::dispose(S):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator::consumer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper$SimpleGenerator::apply(S, io.reactivex.rxjava3.core.Emitter):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$SimpleGenerator" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$SimpleGenerator::consumer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper$SimpleGenerator::apply(S, io.reactivex.rxjava3.core.Emitter):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::leftEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::rightEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupJoin$GroupJoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription" />
			<role name="State" element="io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::leftEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::rightEnd:io.reactivex.rxjava3.functions.Function" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin$JoinSubscription::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect::initialCollection:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelCollect::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce" />
			<role name="State" element="io.reactivex.rxjava3.functions.Supplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce::initialSupplier:io.reactivex.rxjava3.functions.Supplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelReduce::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction::run:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableFromAction::subscribeActual(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber" />
			<role name="State" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::stop:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil$RepeatSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Action" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::action:io.reactivex.rxjava3.functions.Action" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction::get():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver" />
			<role name="State" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::stop:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatUntil$RepeatUntilObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn" />
			<role name="State" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::scheduler:io.reactivex.rxjava3.core.Scheduler" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn::subscribe(org.reactivestreams.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::disposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleUsing::subscribeActual(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing" />
			<role name="State" element="io.reactivex.rxjava3.functions.Consumer" />
			<role name="state" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::resourceDisposer:io.reactivex.rxjava3.functions.Consumer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing::subscribeActual(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="Context" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse" />
			<role name="State" element="io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="state" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse::supplier:io.reactivex.rxjava3.functions.BooleanSupplier" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.functions.Functions$BooleanSupplierPredicateReverse::test(T):boolean" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver" />
			<role name="Implementor" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::fail(java.lang.Throwable):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::dispose():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.BasicFuseableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.observers.DeferredScalarObserver" />
			<role name="Implementor" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.observers.DeferredScalarObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.observers.DeferredScalarObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.rxjava3.observers.DefaultObserver" />
			<role name="Implementor" element="io.reactivex.rxjava3.disposables.Disposable" />
			<role name="implementor" element="io.reactivex.rxjava3.observers.DefaultObserver::upstream:io.reactivex.rxjava3.disposables.Disposable" />
			<role name="Operation()" element="io.reactivex.rxjava3.observers.DefaultObserver::cancel():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver" />
			<role name="Implementor" element="io.reactivex.rxjava3.core.ObservableSource" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::sampler:io.reactivex.rxjava3.core.ObservableSource" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
		</instance>
		<instance>
			<role name="Implementor" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Implementor" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Implementor" element="io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Abstraction" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber" />
			<role name="implementor" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::queue:io.reactivex.rxjava3.internal.fuseable.SimpleQueue" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::onNext(T):void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::cancel():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::clear():void" />
			<role name="Operation()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::isEmpty():boolean" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$ScheduledAction" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.schedulers.SchedulerWhen$ScheduledAction::call(io.reactivex.rxjava3.core.Scheduler$Worker, io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onNext(T):void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::onComplete():void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$BaseConcatMapSubscriber::innerComplete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$BaseRangeSubscription" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRange$BaseRangeSubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber::onComplete():void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSamplePublisher$SamplePublisherSubscriber::complete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$BaseArraySubscription" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray$BaseArraySubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLong$BaseRangeSubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable$BaseRangeSubscription::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter::onNext(T):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber::run():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::onSubscribe(org.reactivestreams.Subscription):void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::onNext(T):void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::onComplete():void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber::innerComplete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableSampleTimed$SampleTimedSubscriber::onComplete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.parallel.ParallelJoin$JoinSubscriptionBase::request(long):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTimed$SampleTimedObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BoundedReplayBuffer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableReplay$BoundedReplayBuffer::next(T):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::onComplete():void" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSampleWithObservable$SampleMainObserver::complete():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.disposables.ReferenceDisposable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.disposables.ReferenceDisposable::dispose():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.flowables.ConnectableFlowable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.flowables.ConnectableFlowable::connect():io.reactivex.rxjava3.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.flowables.ConnectableFlowable::autoConnect(int, io.reactivex.rxjava3.functions.Consumer):io.reactivex.rxjava3.core.Flowable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.observers.BaseTestConsumer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::fail(java.lang.String):java.lang.AssertionError" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::assertValuesOnly(T[]):io.reactivex.rxjava3.observers.BaseTestConsumer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::assertResult(T[]):io.reactivex.rxjava3.observers.BaseTestConsumer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::assertFailure(java.lang.Class, T[]):io.reactivex.rxjava3.observers.BaseTestConsumer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::awaitDone(long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.observers.BaseTestConsumer" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observers.BaseTestConsumer::assertEmpty():io.reactivex.rxjava3.observers.BaseTestConsumer" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Completable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Completable::subscribe(io.reactivex.rxjava3.core.CompletableObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Maybe" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Maybe::subscribe(io.reactivex.rxjava3.core.MaybeObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Observable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Observable::subscribe(io.reactivex.rxjava3.core.Observer):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Single" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Single::subscribe(io.reactivex.rxjava3.core.SingleObserver):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Scheduler" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Scheduler::scheduleDirect(java.lang.Runnable, long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Scheduler::schedulePeriodicallyDirect(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.disposables.Disposable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Flowable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Flowable::subscribe(io.reactivex.rxjava3.core.FlowableSubscriber):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.core.Scheduler$Worker" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Scheduler$Worker::schedule(java.lang.Runnable):io.reactivex.rxjava3.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.core.Scheduler$Worker::schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit):io.reactivex.rxjava3.disposables.Disposable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.observables.ConnectableObservable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observables.ConnectableObservable::connect():io.reactivex.rxjava3.disposables.Disposable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.observables.ConnectableObservable::autoConnect(int, io.reactivex.rxjava3.functions.Consumer):io.reactivex.rxjava3.core.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="io.reactivex.rxjava3.parallel.ParallelFlowable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.parallel.ParallelFlowable::validate(org.reactivestreams.Subscriber):boolean" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.parallel.ParallelFlowable::sorted(java.util.Comparator, int):io.reactivex.rxjava3.core.Flowable" />
			<role name="TemplateMethod()" element="io.reactivex.rxjava3.parallel.ParallelFlowable::toSortedList(java.util.Comparator, int):io.reactivex.rxjava3.core.Flowable" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableCompletable$FlatMapCompletableMainObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapMaybe$FlatMapMaybeObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingle$FlatMapSingleObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.schedulers.IoScheduler$EventLoopWorker" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.IoScheduler$EventLoopWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMerge$CompletableMergeSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArray$InnerCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable$MergeCompletableObserver::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::dispose():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable$FlatMapCompletableMainSubscriber::isDisposed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferBoundary$BufferBoundaryObserver::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler$ExecutorWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.schedulers.SingleScheduler$ScheduledWorker" />
			<role name="RealSubject" element="io.reactivex.rxjava3.disposables.CompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.SingleScheduler$ScheduledWorker::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqual$EqualCoordinator::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposable" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualSingle$EqualCoordinator::dispose():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundaryObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferExactBoundaryObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundaryObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary$BufferBoundaryObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableDebounce$DebounceObserver$DebounceInnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryOpenObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$WindowBoundaryMainObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindowBoundarySelector$OperatorWindowBoundaryOpenObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.subjects.UnicastSubject" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableWindow$WindowExactObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$SourceObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.subjects.PublishSubject" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$SourceObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservablePublishSelector$SourceObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntil" />
			<role name="RealSubject" element="io.reactivex.rxjava3.observers.SerializedObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil$SkipUntil::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.schedulers.ComputationScheduler" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.schedulers.ComputationScheduler$FixedSchedulerPool" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.schedulers.ComputationScheduler::createWorkers(int, io.reactivex.rxjava3.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$BaseEmitter" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::setDisposable(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::setCancellable(io.reactivex.rxjava3.functions.Cancellable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::requested():long" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.flowable.FlowableCreate$SerializedEmitter::isCancelled():boolean" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.SingleObserver" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver::onError(java.lang.Throwable):void" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::downstream:io.reactivex.rxjava3.core.SingleObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.single.SingleTimeout$TimeoutMainObserver$TimeoutFallbackObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutFallbackMaybeObserver::onComplete():void" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe$TimeoutMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutFallbackMaybeObserver::onComplete():void" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::downstream:io.reactivex.rxjava3.core.MaybeObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onSuccess(T):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher$TimeoutMainMaybeObserver::onComplete():void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.Observer" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver::onError(java.lang.Throwable):void" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMap$SourceObserver$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.Observer" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onSubscribe(io.reactivex.rxjava3.disposables.Disposable):void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver::onError(java.lang.Throwable):void" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver::downstream:io.reactivex.rxjava3.core.Observer" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapScheduler$ConcatMapObserver$InnerObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver" />
			<role name="RealSubject" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver$OtherObserver" />
			<role name="Subject" element="io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="subject" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::downstream:io.reactivex.rxjava3.core.CompletableObserver" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::onComplete():void" />
			<role name="Request()" element="io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable$TakeUntilMainObserver::onError(java.lang.Throwable):void" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility" />
</system>

