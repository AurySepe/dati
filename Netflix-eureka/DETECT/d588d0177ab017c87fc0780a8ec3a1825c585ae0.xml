<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method" />
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.netflix.discovery.DiscoveryManager" />
			<role name="uniqueInstance" element="com.netflix.discovery.DiscoveryManager::s_instance:com.netflix.discovery.DiscoveryManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.discovery.converters.EurekaJacksonCodec" />
			<role name="uniqueInstance" element="com.netflix.discovery.converters.EurekaJacksonCodec::INSTANCE:com.netflix.discovery.converters.EurekaJacksonCodec" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.discovery.converters.XmlXStream" />
			<role name="uniqueInstance" element="com.netflix.discovery.converters.XmlXStream::s_instance:com.netflix.discovery.converters.XmlXStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.discovery.converters.JsonXStream" />
			<role name="uniqueInstance" element="com.netflix.discovery.converters.JsonXStream::s_instance:com.netflix.discovery.converters.JsonXStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.appinfo.ApplicationInfoManager" />
			<role name="uniqueInstance" element="com.netflix.appinfo.ApplicationInfoManager::instance:com.netflix.appinfo.ApplicationInfoManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.eureka.util.EIPManager" />
			<role name="uniqueInstance" element="com.netflix.eureka.util.EIPManager::s_instance:com.netflix.eureka.util.EIPManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.eureka.util.AwsAsgUtil" />
			<role name="uniqueInstance" element="com.netflix.eureka.util.AwsAsgUtil::awsAsgUtil:com.netflix.eureka.util.AwsAsgUtil" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.eureka.EurekaServerConfigurationManager" />
			<role name="uniqueInstance" element="com.netflix.eureka.EurekaServerConfigurationManager::instance:com.netflix.eureka.EurekaServerConfigurationManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.eureka.PeerAwareInstanceRegistry" />
			<role name="uniqueInstance" element="com.netflix.eureka.PeerAwareInstanceRegistry::instance:com.netflix.eureka.PeerAwareInstanceRegistry" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.eureka.resources.ResponseCache" />
			<role name="uniqueInstance" element="com.netflix.eureka.resources.ResponseCache::s_instance:com.netflix.eureka.resources.ResponseCache" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="com.netflix.eureka.util.MeasuredRate" />
			<role name="Adapter" element="com.netflix.eureka.InstanceRegistry" />
			<role name="adaptee" element="com.netflix.eureka.InstanceRegistry::renewsLastMin:com.netflix.eureka.util.MeasuredRate" />
			<role name="Request()" element="com.netflix.eureka.InstanceRegistry::renew(java.lang.String, java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.eureka.InstanceRegistry$CircularQueue" />
			<role name="Adapter" element="com.netflix.eureka.InstanceRegistry" />
			<role name="adaptee" element="com.netflix.eureka.InstanceRegistry::recentCanceledQueue:com.netflix.eureka.InstanceRegistry$CircularQueue" />
			<role name="Request()" element="com.netflix.eureka.InstanceRegistry::cancel(java.lang.String, java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.discovery.shared.Pair" />
			<role name="Adapter" element="com.netflix.appinfo.AbstractInstanceConfig" />
			<role name="adaptee" element="com.netflix.appinfo.AbstractInstanceConfig::hostInfo:com.netflix.discovery.shared.Pair" />
			<role name="Request()" element="com.netflix.appinfo.AbstractInstanceConfig::getHostName(boolean):java.lang.String" />
			<role name="Request()" element="com.netflix.appinfo.AbstractInstanceConfig::getIpAddress():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="Adapter" element="com.netflix.eureka.InstanceRegistry" />
			<role name="adaptee" element="com.netflix.eureka.InstanceRegistry::EUREKA_CONFIG:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.InstanceRegistry::getApplication(java.lang.String):com.netflix.discovery.shared.Application" />
			<role name="Request()" element="com.netflix.eureka.InstanceRegistry::getApplications():com.netflix.discovery.shared.Applications" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.appinfo.HealthCheckCallback" />
			<role name="Adapter" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge" />
			<role name="adaptee" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge::callback:com.netflix.appinfo.HealthCheckCallback" />
			<role name="Request()" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge::getStatus(com.netflix.appinfo.InstanceInfo$InstanceStatus):com.netflix.appinfo.InstanceInfo$InstanceStatus" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.discovery.EurekaClientConfig" />
			<role name="Adapter" element="com.netflix.discovery.PropertyBasedAzToRegionMapper" />
			<role name="adaptee" element="com.netflix.discovery.PropertyBasedAzToRegionMapper::clientConfig:com.netflix.discovery.EurekaClientConfig" />
			<role name="Request()" element="com.netflix.discovery.PropertyBasedAzToRegionMapper::getZonesForARegion(java.lang.String):java.util.Set" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite" />
	<pattern name="Decorator" />
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="Context" element="com.netflix.appinfo.ApplicationInfoManager" />
			<role name="State" element="com.netflix.appinfo.EurekaInstanceConfig" />
			<role name="state" element="com.netflix.appinfo.ApplicationInfoManager::config:com.netflix.appinfo.EurekaInstanceConfig" />
			<role name="Request()" element="com.netflix.appinfo.ApplicationInfoManager::refreshDataCenterInfoIfRequired():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider" />
			<role name="State" element="com.netflix.appinfo.EurekaInstanceConfig" />
			<role name="state" element="com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider::config:com.netflix.appinfo.EurekaInstanceConfig" />
			<role name="Request()" element="com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider::get():com.netflix.appinfo.InstanceInfo" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.discovery.DiscoveryClient" />
			<role name="State" element="com.netflix.discovery.EurekaClientConfig" />
			<role name="state" element="com.netflix.discovery.DiscoveryClient::clientConfig:com.netflix.discovery.EurekaClientConfig" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::shouldRegister(com.netflix.appinfo.InstanceInfo):boolean" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getEurekaServiceUrlsFromConfig(java.lang.String, boolean):java.util.List" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::fetchRegistry(boolean):boolean" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getAndUpdateDelta(com.netflix.discovery.shared.Applications):com.sun.jersey.api.client.ClientResponse" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::updateDelta(com.netflix.discovery.shared.Applications):void" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::makeRemoteCall(com.netflix.discovery.DiscoveryClient$Action, java.lang.String):com.sun.jersey.api.client.ClientResponse" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::initScheduledTasks():void" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getServiceUrlsFromDNS(java.lang.String, boolean):java.util.List" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getDiscoveryServiceUrls(java.lang.String):java.util.List" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getZone(com.netflix.appinfo.InstanceInfo):java.lang.String" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getRegion():java.lang.String" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::getZoneBasedDiscoveryUrlsFromRegion(java.lang.String):java.util.Map" />
			<role name="Request()" element="com.netflix.discovery.DiscoveryClient::filterAndShuffle(com.netflix.discovery.shared.Applications):com.netflix.discovery.shared.Applications" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.eureka.PeerAwareInstanceRegistry" />
			<role name="State" element="com.netflix.discovery.EurekaClientConfig" />
			<role name="state" element="com.netflix.eureka.PeerAwareInstanceRegistry::EUREKA_CLIENT_CONFIG:com.netflix.discovery.EurekaClientConfig" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::isRegisterable(com.netflix.appinfo.InstanceInfo):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="Context" element="com.netflix.eureka.cluster.PeerEurekaNode" />
			<role name="state" element="com.netflix.eureka.cluster.PeerEurekaNode::config:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.cluster.PeerEurekaNode::getBatcher(java.lang.String, java.lang.String):com.netflix.logging.messaging.MessageBatcher" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="Context" element="com.netflix.eureka.resources.ApplicationsResource" />
			<role name="state" element="com.netflix.eureka.resources.ApplicationsResource::eurekaConfig:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.resources.ApplicationsResource::getContainerDifferential(java.lang.String, java.lang.String, java.lang.String, javax.ws.rs.core.UriInfo, java.lang.String):javax.ws.rs.core.Response" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="Context" element="com.netflix.eureka.util.AwsAsgUtil" />
			<role name="state" element="com.netflix.eureka.util.AwsAsgUtil::eurekaConfig:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.util.AwsAsgUtil::getAmazonAutoScalingClient():com.amazonaws.services.autoscaling.AmazonAutoScaling" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="Context" element="com.netflix.eureka.util.EIPManager" />
			<role name="state" element="com.netflix.eureka.util.EIPManager::eurekaConfig:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.util.EIPManager::getEC2Service():com.amazonaws.services.ec2.AmazonEC2" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.eureka.PeerAwareInstanceRegistry" />
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="state" element="com.netflix.eureka.PeerAwareInstanceRegistry::EUREKA_SERVER_CONFIG:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::scheduleRenewalThresholdUpdateTask():void" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::setupPeerEurekaNodes():void" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::syncUp():int" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::openForTraffic(int):void" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::shouldAllowAccess(boolean):boolean" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::cancel(java.lang.String, java.lang.String, boolean):boolean" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::isSelfPreservationModeEnabled():boolean" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::updateRenewalThreshold():void" />
			<role name="Request()" element="com.netflix.eureka.PeerAwareInstanceRegistry::isBelowRenewThresold():int" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.eureka.RemoteRegionRegistry" />
			<role name="State" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="state" element="com.netflix.eureka.RemoteRegionRegistry::EUREKA_SERVER_CONFIG:com.netflix.eureka.EurekaServerConfig" />
			<role name="Request()" element="com.netflix.eureka.RemoteRegionRegistry::fetchRegistry():boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.discovery.EurekaIdentityHeaderFilter" />
			<role name="State" element="com.netflix.appinfo.AbstractEurekaIdentity" />
			<role name="state" element="com.netflix.discovery.EurekaIdentityHeaderFilter::authInfo:com.netflix.appinfo.AbstractEurekaIdentity" />
			<role name="Request()" element="com.netflix.discovery.EurekaIdentityHeaderFilter::handle(com.sun.jersey.api.client.ClientRequest):com.sun.jersey.api.client.ClientResponse" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.discovery.InstanceRegionChecker" />
			<role name="State" element="com.netflix.discovery.AzToRegionMapper" />
			<role name="state" element="com.netflix.discovery.InstanceRegionChecker::azToRegionMapper:com.netflix.discovery.AzToRegionMapper" />
			<role name="Request()" element="com.netflix.discovery.InstanceRegionChecker::getInstanceRegion(com.netflix.appinfo.InstanceInfo):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge" />
			<role name="State" element="com.netflix.appinfo.HealthCheckCallback" />
			<role name="state" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge::callback:com.netflix.appinfo.HealthCheckCallback" />
			<role name="Request()" element="com.netflix.appinfo.HealthCheckCallbackToHandlerBridge::getStatus(com.netflix.appinfo.InstanceInfo$InstanceStatus):com.netflix.appinfo.InstanceInfo$InstanceStatus" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.discovery.PropertyBasedAzToRegionMapper" />
			<role name="State" element="com.netflix.discovery.EurekaClientConfig" />
			<role name="state" element="com.netflix.discovery.PropertyBasedAzToRegionMapper::clientConfig:com.netflix.discovery.EurekaClientConfig" />
			<role name="Request()" element="com.netflix.discovery.PropertyBasedAzToRegionMapper::getZonesForARegion(java.lang.String):java.util.Set" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="com.netflix.eureka.InstanceRegistry" />
			<role name="Implementor" element="com.netflix.eureka.EurekaServerConfig" />
			<role name="implementor" element="com.netflix.eureka.InstanceRegistry::EUREKA_SERVER_CONFIG:com.netflix.eureka.EurekaServerConfig" />
			<role name="implementor" element="com.netflix.eureka.InstanceRegistry::EUREKA_CONFIG:com.netflix.eureka.EurekaServerConfig" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::register(com.netflix.appinfo.InstanceInfo, int, boolean):void" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::getApplication(java.lang.String):com.netflix.discovery.shared.Application" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::getApplications():com.netflix.discovery.shared.Applications" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::shouldFetchFromRemoteRegistry(java.lang.String, java.lang.String):boolean" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::getApplicationDeltas():com.netflix.discovery.shared.Applications" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::postInit():void" />
			<role name="Operation()" element="com.netflix.eureka.InstanceRegistry::initRemoteRegionRegistry():void" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.netflix.discovery.AbstractAzToRegionMapper" />
			<role name="TemplateMethod()" element="com.netflix.discovery.AbstractAzToRegionMapper::setRegionsToFetch(java.lang.String[]):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.eureka.InstanceRegistry" />
			<role name="TemplateMethod()" element="com.netflix.eureka.InstanceRegistry::evict():void" />
			<role name="TemplateMethod()" element="com.netflix.eureka.InstanceRegistry::getInstanceByAppAndId(java.lang.String, java.lang.String, boolean):com.netflix.appinfo.InstanceInfo" />
			<role name="TemplateMethod()" element="com.netflix.eureka.InstanceRegistry::getInstancesById(java.lang.String, boolean):java.util.List" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy" />
	<pattern name="Proxy2" />
	<pattern name="Chain of Responsibility" />
</system>

