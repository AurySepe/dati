To honour the JVM settings for this build a single-use Daemon process will be forked. See https://docs.gradle.org/7.3.1/userguide/gradle_daemon.html#sec:disabling_the_daemon.
Daemon will be stopped at the end of the build 

> Configure project :
Building version '0.0.1-SNAPSHOT'
  - reason: shipkit-auto-version caught an exception, falling back to reasonable default
  - run with --debug for more info

> Task :junitJupiterExtensionTest:clean UP-TO-DATE
> Task :kotlinReleaseCoroutinesTest:clean UP-TO-DATE
> Task :groovyTest:clean UP-TO-DATE
> Task :bom:clean UP-TO-DATE
> Task :inline:clean UP-TO-DATE
> Task :extTest:clean UP-TO-DATE
> Task :junit-jupiter:clean UP-TO-DATE
> Task :groovyInlineTest:clean UP-TO-DATE
> Task :android:clean UP-TO-DATE
> Task :junitJupiterParallelTest:clean UP-TO-DATE
> Task :junitJupiterInlineMockMakerExtensionTest:clean UP-TO-DATE
> Task :clean
> Task :module-test:clean SKIPPED
> Task :kotlinTest:clean UP-TO-DATE
> Task :memory-test:clean UP-TO-DATE
> Task :proxy:clean UP-TO-DATE
> Task :osgi-test:clean UP-TO-DATE
> Task :groovyTest:compileJava NO-SOURCE
> Task :junitJupiterExtensionTest:compileJava NO-SOURCE
> Task :extTest:compileJava NO-SOURCE
> Task :groovyInlineTest:compileJava NO-SOURCE
> Task :junitJupiterInlineMockMakerExtensionTest:compileJava NO-SOURCE
> Task :junitJupiterParallelTest:compileJava NO-SOURCE
> Task :kotlinReleaseCoroutinesTest:compileKotlin NO-SOURCE
> Task :kotlinTest:compileKotlin NO-SOURCE
> Task :osgi-test:compileJava NO-SOURCE
> Task :kotlinReleaseCoroutinesTest:compileJava NO-SOURCE
> Task :kotlinTest:compileJava NO-SOURCE
> Task :compileJava FROM-CACHE
> Task :inline:compileJava NO-SOURCE
> Task :module-test:compileJava SKIPPED
> Task :memory-test:compileJava NO-SOURCE
> Task :proxy:compileJava NO-SOURCE
> Task :copyMockMethodDispatcher
> Task :processResources NO-SOURCE
> Task :classes
> Task :android:compileJava FROM-CACHE
> Task :jar
> Task :junit-jupiter:compileJava FROM-CACHE

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 42s
21 actionable tasks: 3 executed, 3 from cache, 15 up-to-date
