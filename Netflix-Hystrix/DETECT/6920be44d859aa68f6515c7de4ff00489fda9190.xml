<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method" />
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisher" />
			<role name="uniqueInstance" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisher::INSTANCE:com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisher" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.contrib.javanica.cache.HystrixRequestCacheManager" />
			<role name="uniqueInstance" element="com.netflix.hystrix.contrib.javanica.cache.HystrixRequestCacheManager::INSTANCE:com.netflix.hystrix.contrib.javanica.cache.HystrixRequestCacheManager" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.contrib.javanica.cache.DefaultHystrixGeneratedCacheKey" />
			<role name="uniqueInstance" element="com.netflix.hystrix.contrib.javanica.cache.DefaultHystrixGeneratedCacheKey::EMPTY:com.netflix.hystrix.contrib.javanica.cache.DefaultHystrixGeneratedCacheKey" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.contrib.javanica.cache.HystrixCacheKeyGenerator" />
			<role name="uniqueInstance" element="com.netflix.hystrix.contrib.javanica.cache.HystrixCacheKeyGenerator::INSTANCE:com.netflix.hystrix.contrib.javanica.cache.HystrixCacheKeyGenerator" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.examples.demo.CreditCardCommand$TransactionType" />
			<role name="uniqueInstance" element="com.netflix.hystrix.examples.demo.CreditCardCommand$TransactionType::AUTH_CAPTURE:com.netflix.hystrix.examples.demo.CreditCardCommand$TransactionType" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault::INSTANCE:com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault::INSTANCE:com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault::INSTANCE:com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.HystrixPlugins" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.HystrixPlugins::INSTANCE:com.netflix.hystrix.strategy.HystrixPlugins" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault::INSTANCE:com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory::SINGLETON:com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault::INSTANCE:com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.HystrixThreadPoolProperties$Setter$TestThreadPoolKey" />
			<role name="uniqueInstance" element="com.netflix.hystrix.HystrixThreadPoolProperties$Setter$TestThreadPoolKey::TEST:com.netflix.hystrix.HystrixThreadPoolProperties$Setter$TestThreadPoolKey" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey" />
			<role name="uniqueInstance" element="com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey::TEST:com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.util.HystrixTimer" />
			<role name="uniqueInstance" element="com.netflix.hystrix.util.HystrixTimer::INSTANCE:com.netflix.hystrix.util.HystrixTimer" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.AbstractCommand$ExecutionResult" />
			<role name="uniqueInstance" element="com.netflix.hystrix.AbstractCommand$ExecutionResult::EMPTY:com.netflix.hystrix.AbstractCommand$ExecutionResult" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicBooleanProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicBooleanProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicIntegerProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicIntegerProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicStringProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicStringProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixCommandProperties" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::properties:com.netflix.hystrix.HystrixCommandProperties" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::allowRequest():boolean" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::isOpen():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPoolMetrics" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::metrics:com.netflix.hystrix.HystrixThreadPoolMetrics" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadExecution():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadCompletion():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadRejection():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPoolProperties" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::properties:com.netflix.hystrix.HystrixThreadPoolProperties" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::isQueueSpaceAvailable():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.util.HystrixTimer" />
			<role name="Adapter" element="com.netflix.hystrix.collapser.RealCollapserTimer" />
			<role name="adaptee" element="com.netflix.hystrix.collapser.RealCollapserTimer::timer:com.netflix.hystrix.util.HystrixTimer" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RealCollapserTimer::addListener(com.netflix.hystrix.util.HystrixTimer$TimerListener):java.lang.ref.Reference" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Adapter" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser" />
			<role name="adaptee" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser::key:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser::initialize():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPoolKey" />
			<role name="Adapter" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool" />
			<role name="adaptee" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool::key:com.netflix.hystrix.HystrixThreadPoolKey" />
			<role name="Request()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool::initialize():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::metrics:com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::markSuccess():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::isOpen():boolean" />
		</instance>
	</pattern>
	<pattern name="Command">
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.contrib.javanica.command.MetaHolder" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.contrib.javanica.collapser.CommandCollapser" />
			<role name="receiver" element="com.netflix.hystrix.contrib.javanica.collapser.CommandCollapser::metaHolder:com.netflix.hystrix.contrib.javanica.command.MetaHolder" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.javanica.collapser.CommandCollapser::getRequestArgument():java.lang.Object" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixRequestCache" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::requestCache:com.netflix.hystrix.HystrixRequestCache" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::toObservable():rx.Observable" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.AbstractCommand$ExecutionResult" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::executionResult:com.netflix.hystrix.AbstractCommand$ExecutionResult" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getFailedExecutionException():java.lang.Throwable" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getNumberEmissions():int" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getNumberFallbackEmissions():int" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getExecutionTimeInMilliseconds():int" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getCommandRunStartTimeInNanos():long" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.contrib.javanica.command.MetaHolder" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction" />
			<role name="receiver" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::metaHolder:com.netflix.hystrix.contrib.javanica.command.MetaHolder" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::getActionName():java.lang.String" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::executionHook:com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHook" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::toObservable():rx.Observable" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::metrics:com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::toObservable():rx.Observable" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction" />
			<role name="receiver" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::commandFactory:com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::execute(com.netflix.hystrix.contrib.javanica.command.ExecutionType):java.lang.Object" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::executeWithArgs(com.netflix.hystrix.contrib.javanica.command.ExecutionType, java.lang.Object[]):java.lang.Object" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixCommandKey" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand" />
			<role name="receiver" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand::key:com.netflix.hystrix.HystrixCommandKey" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand::initialize():void" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::circuitBreaker:com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::isCircuitBreakerOpen():boolean" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.contrib.javanica.command.AbstractHystrixCommand" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.contrib.javanica.command.CommandExecutionAction" />
			<role name="receiver" element="com.netflix.hystrix.contrib.javanica.command.CommandExecutionAction::hystrixCommand:com.netflix.hystrix.contrib.javanica.command.AbstractHystrixCommand" />
			<role name="Execute()" element="com.netflix.hystrix.contrib.javanica.command.CommandExecutionAction::getActionName():java.lang.String" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::numberOfPermits:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::tryAcquire():boolean" />
		</instance>
	</pattern>
	<pattern name="Composite" />
	<pattern name="Decorator" />
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="Context" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker" />
			<role name="State" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="state" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::threadPool:com.netflix.hystrix.HystrixThreadPool" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::schedule(rx.functions.Action0):rx.Subscription" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Context" element="com.netflix.hystrix.collapser.RequestCollapserFactory" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestCollapserFactory::collapserKey:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestCollapserFactory::getCollapserForGlobalScope(com.netflix.hystrix.collapser.HystrixCollapserBridge):com.netflix.hystrix.collapser.RequestCollapser" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.collapser.RequestBatch" />
			<role name="State" element="com.netflix.hystrix.collapser.HystrixCollapserBridge" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestBatch::commandCollapser:com.netflix.hystrix.collapser.HystrixCollapserBridge" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestBatch::executeBatchIfNotAlreadyStarted():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.collapser.RequestCollapser" />
			<role name="State" element="com.netflix.hystrix.collapser.CollapserTimer" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestCollapser::timer:com.netflix.hystrix.collapser.CollapserTimer" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestCollapser::submitRequest(RequestArgumentType):rx.Observable" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction" />
			<role name="State" element="com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory" />
			<role name="state" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::commandFactory:com.netflix.hystrix.contrib.javanica.command.HystrixCommandFactory" />
			<role name="Request()" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::execute(com.netflix.hystrix.contrib.javanica.command.ExecutionType):java.lang.Object" />
			<role name="Request()" element="com.netflix.hystrix.contrib.javanica.command.LazyCommandExecutionAction::executeWithArgs(com.netflix.hystrix.contrib.javanica.command.ExecutionType, java.lang.Object[]):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsPoller$MetricsPoller" />
			<role name="State" element="com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsPoller$MetricsAsJsonPollerListener" />
			<role name="state" element="com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsPoller$MetricsPoller::listener:com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsPoller$MetricsAsJsonPollerListener" />
			<role name="Request()" element="com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsPoller$MetricsPoller::run():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser" />
			<role name="State" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="state" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser::key:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCollapser::initialize():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand" />
			<role name="State" element="com.netflix.hystrix.HystrixCommandKey" />
			<role name="state" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand::key:com.netflix.hystrix.HystrixCommandKey" />
			<role name="Request()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherCommand::initialize():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool" />
			<role name="State" element="com.netflix.hystrix.HystrixThreadPoolKey" />
			<role name="state" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool::key:com.netflix.hystrix.HystrixThreadPoolKey" />
			<role name="Request()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherThreadPool::initialize():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.contrib.networkauditor.HystrixNetworkAuditorAgent" />
			<role name="State" element="com.netflix.hystrix.contrib.networkauditor.HystrixNetworkAuditorEventListener" />
			<role name="state" element="com.netflix.hystrix.contrib.networkauditor.HystrixNetworkAuditorAgent::bridge:com.netflix.hystrix.contrib.networkauditor.HystrixNetworkAuditorEventListener" />
			<role name="Request()" element="com.netflix.hystrix.contrib.networkauditor.HystrixNetworkAuditorAgent::notifyOfNetworkEvent():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingNumber" />
			<role name="State" element="com.netflix.hystrix.util.HystrixRollingNumber$Time" />
			<role name="state" element="com.netflix.hystrix.util.HystrixRollingNumber::time:com.netflix.hystrix.util.HystrixRollingNumber$Time" />
			<role name="Request()" element="com.netflix.hystrix.util.HystrixRollingNumber::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingNumber$Bucket" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingPercentile" />
			<role name="State" element="com.netflix.hystrix.util.HystrixRollingPercentile$Time" />
			<role name="state" element="com.netflix.hystrix.util.HystrixRollingPercentile::time:com.netflix.hystrix.util.HystrixRollingPercentile$Time" />
			<role name="Request()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingPercentile$Bucket" />
		</instance>
	</pattern>
	<pattern name="Strategy">
		<instance>
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingNumber" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingNumber::timeInMilliseconds:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingNumber::numberOfBuckets:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingNumber::getBucketSizeInMilliseconds():int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingNumber::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingNumber$Bucket" />
		</instance>
		<instance>
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingPercentile" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingPercentile::enabled:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingPercentile::timeInMilliseconds:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingPercentile::numberOfBuckets:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingPercentile::bucketDataLength:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::addValue(int[]):void" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getPercentile(double):int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getMean():int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getBucketSizeInMilliseconds():int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingPercentile$Bucket" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::reset():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual" />
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::numberOfPermits:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::tryAcquire():boolean" />
		</instance>
	</pattern>
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="com.netflix.hystrix.HystrixCommandKey" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::commandKey:com.netflix.hystrix.HystrixCommandKey" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::getFallbackSemaphore():com.netflix.hystrix.AbstractCommand$TryableSemaphore" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::getExecutionSemaphore():com.netflix.hystrix.AbstractCommand$TryableSemaphore" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::circuitBreaker:com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::isCircuitBreakerOpen():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::threadPool:com.netflix.hystrix.HystrixThreadPool" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::getRunObservableDecoratedForMetricsAndErrorHandling():rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleThreadEnd():void" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$CounterMetric" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$CounterMetric::getValue(int):java.lang.Number" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$CounterMetric::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$InformationalMetric" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$InformationalMetric::getValue(int):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract::getCumulativeCountForEvent(java.lang.String, com.netflix.hystrix.HystrixMetrics, com.netflix.hystrix.util.HystrixRollingNumberEvent):com.netflix.servo.monitor.Monitor" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract::getRollingCountForEvent(java.lang.String, com.netflix.hystrix.HystrixMetrics, com.netflix.hystrix.util.HystrixRollingNumberEvent):com.netflix.servo.monitor.Monitor" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$GaugeMetric" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$GaugeMetric::getValue(int):java.lang.Number" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.servopublisher.HystrixServoMetricsPublisherAbstract$GaugeMetric::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.javanica.command.AbstractHystrixCommandFactory" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.javanica.command.AbstractHystrixCommandFactory::create(com.netflix.hystrix.contrib.javanica.command.MetaHolder, java.util.Collection):com.netflix.hystrix.contrib.javanica.command.AbstractHystrixCommand" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.contrib.javanica.command.closure.AbstractClosureFactory" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.contrib.javanica.command.closure.AbstractClosureFactory::createClosure(java.lang.String, java.lang.Object):com.netflix.hystrix.contrib.javanica.command.closure.Closure" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::checkAndFlip():void" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::get():java.lang.Object" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.HystrixObservableCollapser" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.HystrixObservableCollapser::toObservable(rx.Scheduler):rx.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.HystrixCollapser" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.HystrixCollapser::toObservable(rx.Scheduler):rx.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.util.Striped64" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.util.Striped64::retryUpdate(long, com.netflix.hystrix.util.Striped64$HashCode, boolean):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.AbstractCommand" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.AbstractCommand::getExecutionObservableWithLifecycle():rx.Observable" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.AbstractCommand::getFallbackOrThrowException(com.netflix.hystrix.HystrixEventType, com.netflix.hystrix.exception.HystrixRuntimeException$FailureType, java.lang.String, java.lang.Exception):rx.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.HystrixObservableCommand" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.HystrixObservableCommand::getExecutionObservable():rx.Observable" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy" />
	<pattern name="Proxy2" />
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
			<role name="successor" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::next:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
		</instance>
	</pattern>
</system>

